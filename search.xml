<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WriteUp - NewStar CTF 2024</title>
      <link href="/2024/11/21/NewStart%20CTF%202024%20wp/"/>
      <url>/2024/11/21/NewStart%20CTF%202024%20wp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>官方wp：<a href="https://ns.openctf.net/wp/2024/">https://ns.openctf.net/wp/2024/</a></p><hr><h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="1、一眼秒了"><a href="#1、一眼秒了" class="headerlink" title="1、一眼秒了"></a>1、一眼秒了</h2><h3 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from serct import flag</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = 65537</span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line">print(n)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"># 52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span><br><span class="line"># 48757373363225981717076130816529380470563968650367175499612268073517990636849798038662283440350470812898424299904371831068541394247432423751879457624606194334196130444478878533092854342610288522236409554286954091860638388043037601371807379269588474814290382239910358697485110591812060488786552463208464541069</span><br></pre></td></tr></table></figure><p>分解 n 得到 p 和 q 的值</p><h3 id="解题脚本如下"><a href="#解题脚本如下" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line">n = 52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span><br><span class="line">c = 48757373363225981717076130816529380470563968650367175499612268073517990636849798038662283440350470812898424299904371831068541394247432423751879457624606194334196130444478878533092854342610288522236409554286954091860638388043037601371807379269588474814290382239910358697485110591812060488786552463208464541069</span><br><span class="line">p = 7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956044421</span><br><span class="line">q = 7221289171488727827673517139597844534869368289455419695964957239047692699919030405800116133805855968123601433247022090070114331842771417566928809956045093</span><br><span class="line">e = 65537</span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line">d=gmpy2.invert(e, phi)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="2、xor"><a href="#2、xor" class="headerlink" title="2、xor"></a>2、xor</h2><h3 id="题目如下-1"><a href="#题目如下-1" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#As a freshman starting in 2024, you should know something about XOR, so this task is for you to sign in.</span><br><span class="line"></span><br><span class="line">from pwn import xor</span><br><span class="line">#The Python pwntools library has a convenient xor() function that can XOR together data of different types and lengths</span><br><span class="line">from Crypto.Util.number import bytes_to_long</span><br><span class="line"></span><br><span class="line">key = b&#x27;New_Star_CTF&#x27;</span><br><span class="line">flag=&#x27;flag&#123;*******************&#125;&#x27;</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(bytes(flag[:13], encoding=&#x27;utf-8&#x27;))</span><br><span class="line">m2 = flag[13:]</span><br><span class="line"></span><br><span class="line">c1 = m1 ^ bytes_to_long(key)</span><br><span class="line">c2 = xor(key, m2)</span><br><span class="line">print(&#x27;c1=&#x27;,c1)</span><br><span class="line">print(&#x27;c2=&#x27;,c2)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c1= 8091799978721254458294926060841</span><br><span class="line">c2= b&#x27;;:\x1c1&lt;\x03&gt;*\x10\x11u;&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="解题脚本如下-1"><a href="#解题脚本如下-1" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line">def xor(data, key):</span><br><span class="line">    return bytes([b ^ key[i % len(key)] for i, b in enumerate(data)])</span><br><span class="line"></span><br><span class="line"># 已知的密钥和加密结果</span><br><span class="line">key = b&#x27;New_Star_CTF&#x27;</span><br><span class="line">c1 = 8091799978721254458294926060841</span><br><span class="line">c2 = b&#x27;;:\x1c1&lt;\x03&gt;*\x10\x11u;&#x27;</span><br><span class="line"></span><br><span class="line"># 步骤 1: 还原 m1</span><br><span class="line">m1 = c1 ^ bytes_to_long(key)</span><br><span class="line"></span><br><span class="line"># 步骤 2: 将 m1 转换为前 13 个字符</span><br><span class="line">flag_part1 = long_to_bytes(m1).decode()</span><br><span class="line"></span><br><span class="line"># 步骤 3: 还原 m2</span><br><span class="line">flag_part2 = xor(c2, key).decode()</span><br><span class="line"></span><br><span class="line"># 步骤 4: 拼接得到完整的 flag</span><br><span class="line">flag = flag_part1 + flag_part2</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="3、Strange-King"><a href="#3、Strange-King" class="headerlink" title="3、Strange King"></a>3、Strange King</h2><h3 id="题目如下-2"><a href="#题目如下-2" class="headerlink" title="题目如下"></a>题目如下</h3><p><font style="color:rgb(145, 145, 145);">某喜欢抽锐刻 5 的皇帝想每天进步一些，直到他娶了个模，回到原点，全部白给</font><font style="color:rgb(145, 145, 145);">😅</font><font style="color:rgb(145, 145, 145);"> 这是他最后留下的讯息：</font><code>ksjr&#123;EcxvpdErSvcDgdgEzxqjql&#125;</code><font style="color:rgb(145, 145, 145);">，flag 包裹的是可读的明文</font></p><p><font style="color:rgb(145, 145, 145);"></font></p><p><font style="color:rgb(60, 60, 60);">不难猜到是魔改的凯撒密码。题目描述中的数字 5 就是</font><strong><font style="color:rgb(60, 60, 60);">初始偏移量</font></strong><font style="color:rgb(60, 60, 60);">。「每天进步一些」代表</font><strong><font style="color:rgb(60, 60, 60);">偏移量在递增</font></strong><font style="color:rgb(60, 60, 60);">，对 26 取模后会到原点，偏移量每次增加是 26 的因子，此处是 2.</font></p><h3 id="解题脚本如下-2"><a href="#解题脚本如下-2" class="headerlink" title="解题脚本如下"></a><font style="color:rgb(60, 60, 60);">解题脚本如下</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">由题目可以知道这是变异凯撒密码</span><br><span class="line">ksjr&#123;EcxvpdErSvcDgdgEzxqjql&#125;是由flag&#123;...&#125;加密得到的</span><br><span class="line">从ksjr由flag变化而来，可以看出：初始偏移量是5，依次增加2</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt_caesar(c):</span><br><span class="line"></span><br><span class="line">    m = []      # 创建一个列表，用于存储解密后的字符</span><br><span class="line">    shift = 5   # 初始偏移量</span><br><span class="line"></span><br><span class="line">    for char in c:</span><br><span class="line">        if &#x27;a&#x27; &lt;= char &lt;= &#x27;z&#x27;:  # 处理小写字母</span><br><span class="line">            new_char = chr((ord(char) - ord(&#x27;a&#x27;) - shift) % 26 + ord(&#x27;a&#x27;))</span><br><span class="line">            m.append(new_char)  # 将解密后的字符添加到列表</span><br><span class="line"></span><br><span class="line">        elif &#x27;A&#x27; &lt;= char &lt;= &#x27;Z&#x27;:  # 处理大写字母</span><br><span class="line">            new_char = chr((ord(char) - ord(&#x27;A&#x27;) - shift) % 26 + ord(&#x27;A&#x27;))</span><br><span class="line">            m.append(new_char)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            m.append(char)  # 非字母字符保持不变</span><br><span class="line"></span><br><span class="line">        shift += 2  # 每处理一个字符，偏移量增加2</span><br><span class="line"></span><br><span class="line">    return &#x27;&#x27;.join(m)   # 把列表m中的元素连接成字符串，中间用‘’连接，然后返回</span><br><span class="line"></span><br><span class="line">c = &quot;ksjr&#123;EcxvpdErSvcDgdgEzxqjql&#125;&quot;</span><br><span class="line">m = decrypt_caesar(c)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><hr><h1 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h1><h2 id="1、这是几次方？疑惑！"><a href="#1、这是几次方？疑惑！" class="headerlink" title="1、这是几次方？疑惑！"></a>1、这是几次方？疑惑！</h2><h3 id="题目如下-3"><a href="#题目如下-3" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;*****&#125;&#x27;</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">hint = p^e + 10086</span><br><span class="line"></span><br><span class="line">print(&quot;c =&quot;, c)</span><br><span class="line">print(&quot;[n, e] =&quot;, [n, e])</span><br><span class="line">print(&quot;hint =&quot;, hint)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c = 36513006092776816463005807690891878445084897511693065366878424579653926750135820835708001956534802873403195178517427725389634058598049226914694122804888321427912070308432512908833529417531492965615348806470164107231108504308584954154513331333004804817854315094324454847081460199485733298227480134551273155762</span><br><span class="line">[n, e] = [124455847177872829086850368685666872009698526875425204001499218854100257535484730033567552600005229013042351828575037023159889870271253559515001300645102569745482135768148755333759957370341658601268473878114399708702841974488367343570414404038862892863275173656133199924484523427712604601606674219929087411261, 65537]</span><br><span class="line">hint = 12578819356802034679792891975754306960297043516674290901441811200649679289740456805726985390445432800908006773857670255951581884098015799603908242531673390</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="解题代码如下"><a href="#解题代码如下" class="headerlink" title="解题代码如下"></a>解题代码如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line">c = 36513006092776816463005807690891878445084897511693065366878424579653926750135820835708001956534802873403195178517427725389634058598049226914694122804888321427912070308432512908833529417531492965615348806470164107231108504308584954154513331333004804817854315094324454847081460199485733298227480134551273155762</span><br><span class="line">n = 124455847177872829086850368685666872009698526875425204001499218854100257535484730033567552600005229013042351828575037023159889870271253559515001300645102569745482135768148755333759957370341658601268473878114399708702841974488367343570414404038862892863275173656133199924484523427712604601606674219929087411261</span><br><span class="line">e = 65537</span><br><span class="line">hint = 12578819356802034679792891975754306960297043516674290901441811200649679289740456805726985390445432800908006773857670255951581884098015799603908242531673390</span><br><span class="line"></span><br><span class="line">p = hint^e+10086</span><br><span class="line">q=n//p</span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line">d=pow(e, -1,phi)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="2、Since-you-konw-something"><a href="#2、Since-you-konw-something" class="headerlink" title="2、Since you konw something"></a>2、<font style="color:rgb(60, 60, 60);">Since you konw something</font></h2><h3 id="题目如下-4"><a href="#题目如下-4" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from pwn import xor</span><br><span class="line">#The Python pwntools library has a convenient xor() function that can XOR together data of different types and lengths</span><br><span class="line">from Crypto.Util.number import bytes_to_long</span><br><span class="line"></span><br><span class="line">key = ?? #extremely short</span><br><span class="line">FLAG = &#x27;flag&#123;????????&#125;&#x27;</span><br><span class="line">c = bytes_to_long(xor(FLAG,key))</span><br><span class="line"></span><br><span class="line">print(&quot;c=&#123;&#125;&quot;.format(c))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c=218950457292639210021937048771508243745941011391746420225459726647571</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="解题代码如下-1"><a href="#解题代码如下-1" class="headerlink" title="解题代码如下"></a>解题代码如下</h3><p><font style="color:rgb(60, 60, 60);">这道题可以关注的地方是 flag 的格式是明确的 </font><code>flag&#123;</code><font style="color:rgb(60, 60, 60);"> 开头，结合注释，</font><code>key</code><font style="color:rgb(60, 60, 60);"> 极短，直接把 </font><code>c</code><font style="color:rgb(60, 60, 60);"> 和 </font><code>flag&#123;</code><font style="color:rgb(60, 60, 60);"> 异或一下看看</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def xor(a, b):</span><br><span class="line">    return bytes([b ^ k for b, k in zip(a,b)])</span><br><span class="line"></span><br><span class="line">c = 218950457292639210021937048771508243745941011391746420225459726647571</span><br><span class="line">FLAG_head = b&#x27;flag&#123;&#x27;</span><br><span class="line">guess_key = xor(long_to_bytes(c), FLAG_head)</span><br><span class="line">print(guess_key)</span><br><span class="line"># b&#x27;nsnsn&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">可以看到，</font><code>key</code><font style="color:rgb(60, 60, 60);"> 的前一部分是重复的 </font><code>ns</code><font style="color:rgb(60, 60, 60);">，不难猜测 key 就是 </font><code>ns</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def xor(a, b):</span><br><span class="line">    return bytes([b ^ k for b, k in zip(a,b)])</span><br><span class="line"></span><br><span class="line">c = 218950457292639210021937048771508243745941011391746420225459726647571</span><br><span class="line">key = b&#x27;ns&#x27;</span><br><span class="line">FLAG = xor(long_to_bytes(c), key * (len(long_to_bytes(c)) // len(key) + 1))</span><br><span class="line">print(FLAG)</span><br><span class="line"># b&#x27;flag&#123;Y0u_kn0w_th3_X0r_b3tt3r&#125;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def xor(a, b):</span><br><span class="line">    return bytes([b ^ k for b, k in zip(a,b)])</span><br><span class="line"></span><br><span class="line">c = 218950457292639210021937048771508243745941011391746420225459726647571</span><br><span class="line">FLAG_head = b&#x27;flag&#123;&#x27;</span><br><span class="line">guess_key = xor(long_to_bytes(c), FLAG_head)</span><br><span class="line">print(guess_key)</span><br><span class="line"></span><br><span class="line">key = b&#x27;ns&#x27;</span><br><span class="line">FLAG = xor(long_to_bytes(c), key * (len(long_to_bytes(c)) // len(key) + 1))</span><br><span class="line">print(FLAG)</span><br><span class="line"># b&#x27;flag&#123;Y0u_kn0w_th3_X0r_b3tt3r&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="3、just-one-and-more-than-two"><a href="#3、just-one-and-more-than-two" class="headerlink" title="3、just one and more than two"></a>3、<font style="color:rgb(60, 60, 60);">just one and more than two</font></h2><h3 id="题目如下-5"><a href="#题目如下-5" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;?????&#125;&#x27;</span><br><span class="line">m1 = bytes_to_long(flag[:len(flag)//2])</span><br><span class="line">m2 = bytes_to_long(flag[len(flag)//2:])</span><br><span class="line">e = 65537</span><br><span class="line">p, q, r= (getPrime(512) for _ in range(3))</span><br><span class="line">N=p*q*r</span><br><span class="line">c1 = pow(m1, e, p)</span><br><span class="line">c2 = pow(m2, e, N)</span><br><span class="line"></span><br><span class="line">print(f&#x27;p=&#123;p&#125;\nq=&#123;q&#125;\nr=&#123;r&#125;\nc1=&#123;c1&#125;\nc2=&#123;c2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">p=11867061353246233251584761575576071264056514705066766922825303434965272105673287382545586304271607224747442087588050625742380204503331976589883604074235133</span><br><span class="line">q=11873178589368883675890917699819207736397010385081364225879431054112944129299850257938753554259645705535337054802699202512825107090843889676443867510412393</span><br><span class="line">r=12897499208983423232868869100223973634537663127759671894357936868650239679942565058234189535395732577137079689110541612150759420022709417457551292448732371</span><br><span class="line">c1=8705739659634329013157482960027934795454950884941966136315983526808527784650002967954059125075894300750418062742140200130188545338806355927273170470295451</span><br><span class="line">c2=1004454248332792626131205259568148422136121342421144637194771487691844257449866491626726822289975189661332527496380578001514976911349965774838476334431923162269315555654716024616432373992288127966016197043606785386738961886826177232627159894038652924267065612922880048963182518107479487219900530746076603182269336917003411508524223257315597473638623530380492690984112891827897831400759409394315311767776323920195436460284244090970865474530727893555217020636612445</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">很常见的 RSA 板子题。在一般的 RSA 中，我们有 phi &#x3D; (p - 1)(q - 1)</font></p><p><font style="color:rgb(60, 60, 60);">针对 just one 的情况：phi &#x3D; p - 1</font></p><p><font style="color:rgb(60, 60, 60);">针对 more than two 的情况：phi &#x3D; (p - 1)(q - 1)(r - 1)</font></p><p><font style="color:rgb(60, 60, 60);">其他和普通 RSA 一样解即可</font></p><h3 id="解题代码如下-2"><a href="#解题代码如下-2" class="headerlink" title="解题代码如下"></a>解题代码如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">p=11867061353246233251584761575576071264056514705066766922825303434965272105673287382545586304271607224747442087588050625742380204503331976589883604074235133</span><br><span class="line">q=11873178589368883675890917699819207736397010385081364225879431054112944129299850257938753554259645705535337054802699202512825107090843889676443867510412393</span><br><span class="line">r=12897499208983423232868869100223973634537663127759671894357936868650239679942565058234189535395732577137079689110541612150759420022709417457551292448732371</span><br><span class="line">c1=8705739659634329013157482960027934795454950884941966136315983526808527784650002967954059125075894300750418062742140200130188545338806355927273170470295451</span><br><span class="line">c2=1004454248332792626131205259568148422136121342421144637194771487691844257449866491626726822289975189661332527496380578001514976911349965774838476334431923162269315555654716024616432373992288127966016197043606785386738961886826177232627159894038652924267065612922880048963182518107479487219900530746076603182269336917003411508524223257315597473638623530380492690984112891827897831400759409394315311767776323920195436460284244090970865474530727893555217020636612445</span><br><span class="line">e=65537</span><br><span class="line"></span><br><span class="line">phi_1 = p-1</span><br><span class="line">d1 = inverse(e, phi_1)</span><br><span class="line">m1 = pow(c1, d1, p)</span><br><span class="line"></span><br><span class="line">phi_2 = (p-1)*(q-1)*(r-1)</span><br><span class="line">d2 = inverse(e, phi_2)</span><br><span class="line">m2 = pow(c2, d2, p*q*r)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m1)+long_to_bytes(m2))</span><br><span class="line"># b&#x27;flag&#123;Y0u_re4lly_kn0w_Euler_4nd_N3xt_Eu1er_is_Y0u!&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="4、茶里茶气"><a href="#4、茶里茶气" class="headerlink" title="4、茶里茶气"></a>4、茶里茶气</h2><h3 id="题目如下-6"><a href="#题目如下-6" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = &quot;flag&#123;*****&#125;&quot;</span><br><span class="line">assert len( flag ) == 25</span><br><span class="line"></span><br><span class="line">a = &quot;&quot;</span><br><span class="line">for i in flag:</span><br><span class="line">    a += hex(ord(i))[2:]</span><br><span class="line">l = int(a,16).bit_length()</span><br><span class="line">print(&quot;l  =&quot; , l )</span><br><span class="line"></span><br><span class="line">v0 = int(a,16)&gt;&gt;(l//2)</span><br><span class="line">v1 = int(a,16)-(v0&lt;&lt;(l//2))</span><br><span class="line">p = getPrime(l//2+10)</span><br><span class="line"></span><br><span class="line">v2 = 0</span><br><span class="line">derta = 462861781278454071588539315363</span><br><span class="line">v3 = 489552116384728571199414424951</span><br><span class="line">v4 = 469728069391226765421086670817</span><br><span class="line">v5 = 564098252372959621721124077407</span><br><span class="line">v6 = 335640247620454039831329381071</span><br><span class="line">assert v1 &lt; p and v0 &lt; p and derta &lt; p and v3 &lt; p and v4 &lt; p and v5 &lt; p and v6 &lt; p </span><br><span class="line"></span><br><span class="line">for i in range(32):</span><br><span class="line">    v1 += (v0+v2) ^ ( 8*v0 + v3 ) ^ ( (v0&gt;&gt;7) + v4 ) ; v1 %= p</span><br><span class="line">    v0 += (v1+v2) ^ ( 8*v1 + v5 ) ^ ( (v1&gt;&gt;7) + v6 ) ; v0 %= p</span><br><span class="line">    v2 += derta ; v2 %= p</span><br><span class="line"></span><br><span class="line">print( &quot;p  =&quot; , p  )</span><br><span class="line">print( &quot;v0 =&quot; , v0 )</span><br><span class="line">print( &quot;v1 =&quot; , v1 )</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">l  = 199</span><br><span class="line">p  = 446302455051275584229157195942211</span><br><span class="line">v0 = 190997821330413928409069858571234</span><br><span class="line">v1 = 137340509740671759939138452113480</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">简单的 TEA（Tiny Encryption Algorithm）加密算法</font></p><p><font style="color:rgb(60, 60, 60);">只需要逆推一下过程，然后把字符串拼接在一起转成字符即可</font></p><p><font style="color:rgb(60, 60, 60);">对于</font><font style="color:rgb(60, 60, 60);"> </font><code>v2</code><font style="color:rgb(60, 60, 60);"> </font><font style="color:rgb(60, 60, 60);">这个变量，先进行正推得到最终值，再倒退进行解密</font>（数量级不大，使用乘法和加法都可以）</p><p><font style="color:rgb(60, 60, 60);">注意每一步都要取模</font></p><h3 id="解题代码如下-3"><a href="#解题代码如下-3" class="headerlink" title="解题代码如下"></a><font style="color:rgb(60, 60, 60);">解题代码如下</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">v0 = 190997821330413928409069858571234</span><br><span class="line">v1 = 137340509740671759939138452113480</span><br><span class="line">v2 = 0</span><br><span class="line">derta = 462861781278454071588539315363</span><br><span class="line">v3 = 489552116384728571199414424951</span><br><span class="line">v4 = 469728069391226765421086670817</span><br><span class="line">v5 = 564098252372959621721124077407</span><br><span class="line">v6 = 335640247620454039831329381071</span><br><span class="line">p = 446302455051275584229157195942211</span><br><span class="line">l = 199</span><br><span class="line"># 先计算出v2</span><br><span class="line">for i in range(32):</span><br><span class="line">    v2 += derta;</span><br><span class="line">    v2 %= p</span><br><span class="line">print(v2)</span><br><span class="line"></span><br><span class="line">for i in range(32):</span><br><span class="line">    v2 -= derta;</span><br><span class="line">    v2 %= p</span><br><span class="line">    v0 -= (v1 + v2) ^ (8 * v1 + v5) ^ ((v1 &gt;&gt; 7) + v6);</span><br><span class="line">    v0 %= p</span><br><span class="line">    v1 -= (v0+v2) ^ ( 8*v0 + v3 ) ^ ( (v0&gt;&gt;7) + v4 ) ; v1 %= p</span><br><span class="line"></span><br><span class="line">print(v0,v1)</span><br><span class="line"></span><br><span class="line">A = (v0 &lt;&lt; l // 2) + v1     #v1 = int(a,16)-(v0&lt;&lt;(l//2))</span><br><span class="line"></span><br><span class="line">print(v0 &lt;&lt; l // 2)</span><br><span class="line">print(A)</span><br><span class="line">print(long_to_bytes(A))</span><br><span class="line"># b&#x27;flag&#123;f14gg9_te2_1i_7ea_7&#125;&#x27;</span><br></pre></td></tr></table></figure><hr><h1 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h1><h2 id="1、故事新编"><a href="#1、故事新编" class="headerlink" title="1、故事新编"></a><font style="color:rgb(60, 60, 60);">1、故事新编</font></h2><h3 id="（1）故事新编-1"><a href="#（1）故事新编-1" class="headerlink" title="（1）故事新编 1"></a><font style="color:rgb(60, 60, 60);">（1）故事新编 1</font></h3><h4 id="题目如下-7"><a href="#题目如下-7" class="headerlink" title="题目如下"></a>题目如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from hashlib import md5</span><br><span class="line">zen1  = &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">key1 =</span><br><span class="line">def enc1(plaintext, key):</span><br><span class="line">    def shift_char(c, k):</span><br><span class="line">        return chr(((ord(c) - ord(&#x27;A&#x27;) + (ord(k) - ord(&#x27;A&#x27;))) % 26) + ord(&#x27;A&#x27;))</span><br><span class="line"></span><br><span class="line">    plaintext = plaintext.upper()</span><br><span class="line">    key = key.upper()</span><br><span class="line">    ciphertext = []</span><br><span class="line">    key_index = 0</span><br><span class="line"></span><br><span class="line">    for char in plaintext:</span><br><span class="line">        if char.isalpha():</span><br><span class="line">            ciphertext.append(shift_char(char, key[key_index % len(key)]))</span><br><span class="line">            key_index += 1</span><br><span class="line">        else:</span><br><span class="line">            ciphertext.append(char)</span><br><span class="line"></span><br><span class="line">    return &#x27;&#x27;.join(ciphertext)</span><br><span class="line">print(&#x27;enc = \&#x27;\&#x27;\&#x27;&#x27; + enc1(zen1, key1)+&#x27;\&#x27;\&#x27;\&#x27;&#x27;)</span><br><span class="line">flag = b&#x27;flag&#123;&#x27;+md5(zen1.encode()).hexdigest().encode()+b&#x27;&#125;&#x27;</span><br><span class="line">print(flag)</span><br><span class="line">#----------------------------------------------</span><br><span class="line">enc = &#x27;&#x27;&#x27;</span><br><span class="line">TYBNBBZNT WF TYUMMK NAIB HYFZ.</span><br><span class="line">XFIFBKWG AM CXBMYK BVNF CNITBWBB.</span><br><span class="line">GVEJMX QL VXBHRJ NITV VIFXZRP.</span><br><span class="line">WPFXEYQ QG OWNUXZ MBTV QBEJMBKTNXL.</span><br><span class="line">TYSN JL JXNMMF GZUO GMLNXL.</span><br><span class="line">GCSLTX QL VXBHRJ NITV WYGAS.</span><br><span class="line">SDUHT QL PXOSAWLF</span><br><span class="line">KMTXTJWYANZ VWNHMA.</span><br><span class="line">GCWWJTT VULMG NJYO&#x27;M AIYVQOY WHPNOA NH JFRSE UAM KOEMG.</span><br><span class="line">NDNIHCZB IZOPLCDTTBNR JSNLM QNZBNR.</span><br><span class="line">MFEGLT LPHOEL BRNYS IILM LQZRFNMR.</span><br><span class="line">CGFXAG RPJMBKBNEG GVDYOVMW.</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">维吉尼亚密码的加密算法，只要认出来就可以秒。如果你有认真了解过维吉尼亚的加密算法，那么你应该会觉得这段加密非常眼熟；如果你熟练掌握了 AI 的使用，你也可以直接问 AI 这段加密算法像什么。</font></p><p><font style="color:rgb(60, 60, 60);">对于维吉尼亚密码的解密，这里方法并不单一，仅给出一个可用网址：</font><a href="https://www.guballa.de/vigenere-solver">Vigenere Solver | guballa.de</a><font style="color:rgb(60, 60, 60);">，用于爆破维吉尼亚密码。</font></p><p><font style="color:rgb(60, 60, 60);"></font></p><h3 id="（2）故事新编-2"><a href="#（2）故事新编-2" class="headerlink" title="（2）故事新编 2"></a><font style="color:rgb(60, 60, 60);">（2）故事新编 2</font></h3><h4 id="题目如下-8"><a href="#题目如下-8" class="headerlink" title="题目如下"></a>题目如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">from hashlib import md5</span><br><span class="line">zen2 = &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">key2 = </span><br><span class="line">dict1 = &#123;&#x27;A&#x27;: 0, &#x27;B&#x27;: 1, &#x27;C&#x27;: 2, &#x27;D&#x27;: 3, &#x27;E&#x27;: 4,</span><br><span class="line">         &#x27;F&#x27;: 5, &#x27;G&#x27;: 6, &#x27;H&#x27;: 7, &#x27;I&#x27;: 8, &#x27;J&#x27;: 9,</span><br><span class="line">         &#x27;K&#x27;: 10, &#x27;L&#x27;: 11, &#x27;M&#x27;: 12, &#x27;N&#x27;: 13, &#x27;O&#x27;: 14,</span><br><span class="line">         &#x27;P&#x27;: 15, &#x27;Q&#x27;: 16, &#x27;R&#x27;: 17, &#x27;S&#x27;: 18, &#x27;T&#x27;: 19,</span><br><span class="line">         &#x27;U&#x27;: 20, &#x27;V&#x27;: 21, &#x27;W&#x27;: 22, &#x27;X&#x27;: 23, &#x27;Y&#x27;: 24, &#x27;Z&#x27;: 25&#125;</span><br><span class="line"></span><br><span class="line">dict2 = &#123;0: &#x27;A&#x27;, 1: &#x27;B&#x27;, 2: &#x27;C&#x27;, 3: &#x27;D&#x27;, 4: &#x27;E&#x27;,</span><br><span class="line">         5: &#x27;F&#x27;, 6: &#x27;G&#x27;, 7: &#x27;H&#x27;, 8: &#x27;I&#x27;, 9: &#x27;J&#x27;,</span><br><span class="line">         10: &#x27;K&#x27;, 11: &#x27;L&#x27;, 12: &#x27;M&#x27;, 13: &#x27;N&#x27;, 14: &#x27;O&#x27;,</span><br><span class="line">         15: &#x27;P&#x27;, 16: &#x27;Q&#x27;, 17: &#x27;R&#x27;, 18: &#x27;S&#x27;, 19: &#x27;T&#x27;,</span><br><span class="line">         20: &#x27;U&#x27;, 21: &#x27;V&#x27;, 22: &#x27;W&#x27;, 23: &#x27;X&#x27;, 24: &#x27;Y&#x27;, 25: &#x27;Z&#x27;&#125;</span><br><span class="line"></span><br><span class="line">def generate_key(message, key):</span><br><span class="line">    for i in range(len(message)):</span><br><span class="line">        if message[i].isalpha() == False:</span><br><span class="line">            pass</span><br><span class="line">        else:</span><br><span class="line">            key += message[i]</span><br><span class="line">    return key</span><br><span class="line">def enc2(message, key):</span><br><span class="line">    message = message.upper()</span><br><span class="line">    key = key.upper()</span><br><span class="line">    key_new = generate_key(message, key)</span><br><span class="line">    cipher_text = &#x27;&#x27;</span><br><span class="line">    i = 0</span><br><span class="line">    for letter in message:</span><br><span class="line">        if letter.isalpha():</span><br><span class="line">            x = (dict1[letter]+dict1[key_new[i]]) % 26</span><br><span class="line">            i += 1</span><br><span class="line">            cipher_text += dict2[x]</span><br><span class="line">        else:</span><br><span class="line">            cipher_text += letter</span><br><span class="line">    return cipher_text</span><br><span class="line">print(&#x27;enc = \&#x27;\&#x27;\&#x27;&#x27; + enc2(zen2, key2)+&#x27;\&#x27;\&#x27;\&#x27;&#x27;)</span><br><span class="line">flag = b&#x27;flag&#123;&#x27;+md5(zen2.encode()).hexdigest().encode()+b&#x27;&#125;&#x27;</span><br><span class="line">print(flag)</span><br><span class="line">#----------------------------------------------</span><br><span class="line">enc = &#x27;&#x27;&#x27;</span><br><span class="line">AH ILV XUDX WY UFJWTCVMF, VJFWWS YHQ UMSJBTRZSS NG KNLWL.</span><br><span class="line">XTTKE LPCHER HY SFW-- TUH GVWMSLLEMC CAPY BQT --FFAMFUT HYM GZ BC VX.</span><br><span class="line">OMOPCOYD TFTH ZOG FAJ GVH VK VUCIHQS YF FGEGM VRZFNA MIM&#x27;RX ICKUA.</span><br><span class="line">HBH MK TCHNVV WBTP URJAZ.</span><br><span class="line">SMXAHYXA UEIRV DW FFEXU PYZARV OLRV JWLAX APA.</span><br><span class="line">BY XYX PMCCMSLGGOPQTG PW PMGO XA IKILTQB, VB&#x27;K H BRG BRIX.</span><br><span class="line">XQ TPR QFHLFMHVWETQTG PW MMHJ XA IKILTQB, VB EEY TC T USLS TDMN.</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">自动密钥密码，与故事新编 1 相类似。在阅读代码之后应该会发现这和维吉尼亚密码非常相似，可以去搜索一下维吉尼亚密码的变种；当然你也可以依靠 AI.</font></p><p><font style="color:rgb(60, 60, 60);">对于自动密钥密码的解密，可以依靠上面的网址修改 Cipher Variant 为 autokey，也可以在网络上找到脚本手撕。</font></p><p><font style="color:rgb(60, 60, 60);">参考链接：</font><a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/">Practical Cryptography</a></p><h2 id="2、两只黄鹂鸣翠柳"><a href="#2、两只黄鹂鸣翠柳" class="headerlink" title="2、两只黄鹂鸣翠柳"></a>2、两只黄鹂鸣翠柳</h2><h3 id="题目如下-9"><a href="#题目如下-9" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">while 1:</span><br><span class="line">    delta = getPrime(1024)</span><br><span class="line">    p = getPrime(512)</span><br><span class="line">    q = getPrime(512)</span><br><span class="line">    N = p * q</span><br><span class="line">    if delta&lt;N:</span><br><span class="line">        break</span><br><span class="line">flag = b&#x27;flag&#123;xxxxxxxxxxxxx&#125;&#x27;</span><br><span class="line">e = getPrime(10)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">t1 = random.randint(0,255)</span><br><span class="line">t2 = random.randint(0,255)</span><br><span class="line">assert (t1 != t2)</span><br><span class="line">m1 = m + t1 * delta</span><br><span class="line">m2 = m + t2 * delta</span><br><span class="line">c1 = pow(m1, e, N)</span><br><span class="line">c2 = pow(m2, e, N)</span><br><span class="line">print(&quot;e = &quot;, e)</span><br><span class="line">print(&quot;c1 = &quot;, c1)</span><br><span class="line">print(&quot;c2 = &quot;, c2)</span><br><span class="line">print(&quot;N = &quot;, N)</span><br><span class="line">print(&quot;delta = &quot;, delta)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">e =  683</span><br><span class="line">c1 =  56853945083742777151835031127085909289912817644412648006229138906930565421892378967519263900695394136817683446007470305162870097813202468748688129362479266925957012681301414819970269973650684451738803658589294058625694805490606063729675884839653992735321514315629212636876171499519363523608999887425726764249</span><br><span class="line">c2 =  89525609620932397106566856236086132400485172135214174799072934348236088959961943962724231813882442035846313820099772671290019212756417758068415966039157070499263567121772463544541730483766001321510822285099385342314147217002453558227066228845624286511538065701168003387942898754314450759220468473833228762416</span><br><span class="line">N =  147146340154745985154200417058618375509429599847435251644724920667387711123859666574574555771448231548273485628643446732044692508506300681049465249342648733075298434604272203349484744618070620447136333438842371753842299030085718481197229655334445095544366125552367692411589662686093931538970765914004878579967</span><br><span class="line">delta =  93400488537789082145777768934799642730988732687780405889371778084733689728835104694467426911976028935748405411688535952655119354582508139665395171450775071909328192306339433470956958987928467659858731316115874663323404280639312245482055741486933758398266423824044429533774224701791874211606968507262504865993</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">整体就是一个稍加变形的关联信息攻击，只是一般的关联信息攻击给出的两个方程式信息比较明确，而在本题中各掺了一点点随机性的干扰小量。</font></p><p><font style="color:rgb(60, 60, 60);">所以其实在思路上只需要依整体代换思想把它改为一般的关联信息攻击，再对被代换的「整体」进行爆破求解即可。</font></p><p><font style="color:rgb(60, 60, 60);">此外由于本题对于较大的数据求最大公因子的需求，一般的 GCD 算法难以胜任，所以需要使用 Half-GCD 算法。关于这个算法的原理可以参考下面这篇文章：</font></p><ul><li><a href="https://www.cnblogs.com/whx1003/p/16217087.html">多项式 gcd 的正确姿势：Half-GCD 算法</a></li></ul><h3 id="解题脚本如下-3"><a href="#解题脚本如下-3" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def HGCD(a, b):</span><br><span class="line">    if 2 * b.degree() &lt;= a.degree() or a.degree() == 1:</span><br><span class="line">        return 1, 0, 0, 1</span><br><span class="line">    m = a.degree() // 2</span><br><span class="line">    a_top, a_bot = a.quo_rem(x ^ m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x ^ m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x ^ (m // 2))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x ^ (m // 2))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    return RET00, RET01, RET10, RET11</span><br><span class="line"></span><br><span class="line">def related_message_attack(a, b):</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    if r == 0:</span><br><span class="line">        return b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    if d == 0:</span><br><span class="line">        return c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    if r == 0:</span><br><span class="line">        return d</span><br><span class="line">    return related_message_attack(d, r)</span><br><span class="line"></span><br><span class="line">e =  683</span><br><span class="line">c1 =  56853945083742777151835031127085909289912817644412648006229138906930565421892378967519263900695394136817683446007470305162870097813202468748688129362479266925957012681301414819970269973650684451738803658589294058625694805490606063729675884839653992735321514315629212636876171499519363523608999887425726764249</span><br><span class="line">c2 =  89525609620932397106566856236086132400485172135214174799072934348236088959961943962724231813882442035846313820099772671290019212756417758068415966039157070499263567121772463544541730483766001321510822285099385342314147217002453558227066228845624286511538065701168003387942898754314450759220468473833228762416</span><br><span class="line">N =  147146340154745985154200417058618375509429599847435251644724920667387711123859666574574555771448231548273485628643446732044692508506300681049465249342648733075298434604272203349484744618070620447136333438842371753842299030085718481197229655334445095544366125552367692411589662686093931538970765914004878579967</span><br><span class="line">delta =  93400488537789082145777768934799642730988732687780405889371778084733689728835104694467426911976028935748405411688535952655119354582508139665395171450775071909328192306339433470956958987928467659858731316115874663323404280639312245482055741486933758398266423824044429533774224701791874211606968507262504865993</span><br><span class="line"></span><br><span class="line">is_flag = False</span><br><span class="line"></span><br><span class="line">for delt in range(-255, 255, 8):</span><br><span class="line"></span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">    f = x ^ e - c1</span><br><span class="line">    g1 = ((x + (delt + 0) * delta) ^ e - c2) * ((x + (delt + 1) * delta) ^ e - c2)</span><br><span class="line">    g2 = ((x + (delt + 2) * delta) ^ e - c2) * ((x + (delt + 3) * delta) ^ e - c2)</span><br><span class="line">    g3 = ((x + (delt + 4) * delta) ^ e - c2) * ((x + (delt + 5) * delta) ^ e - c2)</span><br><span class="line">    g4 = ((x + (delt + 6) * delta) ^ e - c2) * ((x + (delt + 7) * delta) ^ e - c2)</span><br><span class="line">    if delt == -7:</span><br><span class="line">        g4 = ((x + (delt + 6) * delta) ^ e - c2)</span><br><span class="line">    g = g1 * g2 * g3 * g4</span><br><span class="line">    res = related_message_attack(f, g)</span><br><span class="line">    m1 = int(-res.monic().coefficients()[0])</span><br><span class="line">    for t1 in range(256):</span><br><span class="line">        m = (m1 % N - t1 * delta) % N</span><br><span class="line">        if m &gt; 0:</span><br><span class="line">            flag = long_to_bytes(m)</span><br><span class="line">            if flag[:4] ==b&#x27;flag&#x27;:</span><br><span class="line">                print(flag)</span><br><span class="line">                is_flag = True</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">    if is_flag:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h2 id="3、不用谢喵"><a href="#3、不用谢喵" class="headerlink" title="3、不用谢喵"></a>3、不用谢喵</h2><h3 id="题目如下-10"><a href="#题目如下-10" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">KEY = b&quot;fake_key_fake_ke&quot;</span><br><span class="line">FLAG = &quot;flag&#123;fake_flag_fake_flag&#125;&quot;</span><br><span class="line"></span><br><span class="line">def decrypt(c):</span><br><span class="line">    AES_ECB = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    decrypted = AES_ECB.decrypt(long_to_bytes(c))</span><br><span class="line"></span><br><span class="line">    return decrypted.hex()</span><br><span class="line"></span><br><span class="line">def encrypt():</span><br><span class="line">    iv = os.urandom(16)</span><br><span class="line">    AES_CBC = AES.new(KEY, AES.MODE_CBC, iv)</span><br><span class="line">    encrypted = AES_CBC.encrypt(FLAG.encode())</span><br><span class="line">    print(&#x27;iv:&#x27;,iv.hex())</span><br><span class="line"></span><br><span class="line">    return iv.hex() + encrypted.hex()</span><br><span class="line"></span><br><span class="line">c=encrypt()</span><br><span class="line">print(&#x27;encrypt:&#x27;,c)</span><br><span class="line">print(&#x27;decrypt:&#x27;,decrypt(int(c,16)))</span><br><span class="line"></span><br><span class="line">#encrypt: f2040fe3063a5b6c65f66e1d2bf47b4cddb206e4ddcf7524932d25e92d57d3468398730b59df851cbac6d65073f9e138</span><br><span class="line">#什么是AES啊😭，求求你帮我解密吧，我什么都会做的！！！！！😭</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">什么都会做？那就去学习一下AES吧……</span><br><span class="line">我这次就先给你解一下好了，不用谢喵</span><br><span class="line">decrypt: f9899749fec184d81afecd35da430bc394686e847d72141b3a955a4f6e920e7d91cb599d92ba2a6ba51860bb5b32f23b</span><br><span class="line">这对吗？哦不对不对，哦对的对的。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这道题需要了解AES中的ECB和CBC模式，ECB模式下，明文分组和密文分组是一一对应的，而CBC模式下，明文分组和密文分组是有联系的，具体了解看一下两篇文章：<a href="https://blog.csdn.net/m0_48119914/article/details/141760647?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522830E4ACB-932A-4884-BF5B-B4E0439AF379%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=830E4ACB-932A-4884-BF5B-B4E0439AF379&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-141760647-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%A8%A1%E5%BC%8FAES-ECB%E6%A8%A1%E5%BC%8F%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E9%99%84%EF%BC%9A%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0&spm=1018.2226.3001.4187">ECB模式</a>和<a href="https://blog.csdn.net/m0_48119914/article/details/141831174?ops_request_misc=&request_id=&biz_id=102&utm_term=AES%E7%9A%84CBC%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-141831174.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">CBC模式</a></p><p><img src="https://pic.imgdb.cn/item/673ef6a0d29ded1a8cdfbf8f.webp"></p><p>（这里有点错误，“加密”应该改为“解密”）</p><p><img src="https://pic.imgdb.cn/item/673ef6d7d29ded1a8ce02ad6.webp"></p><p>虽然说这道题是明文经过了CBC加密，再经过ECB解密，但是没有关系，因为这两种模式的解密过程中的“解密”是相同的（“解密”就是文章中的圈起来的“解密”）</p><h3 id="解题脚本如下-4"><a href="#解题脚本如下-4" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">m = &quot;f9899749fec184d81afecd35da430bc394686e847d72141b3a955a4f6e920e7d91cb599d92ba2a6ba51860bb5b32f23b&quot;</span><br><span class="line">c = &quot;f2040fe3063a5b6c65f66e1d2bf47b4cddb206e4ddcf7524932d25e92d57d3468398730b59df851cbac6d65073f9e138&quot;</span><br><span class="line"></span><br><span class="line">#把iv和密文分开</span><br><span class="line">iv_hex = c[:32]</span><br><span class="line">en_flag_hex = c[32:]</span><br><span class="line">iv = bytes.fromhex(iv_hex)</span><br><span class="line">en_flag = bytes.fromhex(en_flag_hex)</span><br><span class="line"></span><br><span class="line">#密文分块处理</span><br><span class="line">c1 = en_flag[:16]</span><br><span class="line">c2 = en_flag[16:]</span><br><span class="line"></span><br><span class="line">#明文也进行分块处理</span><br><span class="line">m = bytes.fromhex(m)</span><br><span class="line">m1 = m[:16]     #m1是iv“解密”后的结果</span><br><span class="line">m2 = m[16:32]   #m2是c1“解密”后的结果</span><br><span class="line">m3 = m[32:]     #m3是c2“解密”后的结果</span><br><span class="line"></span><br><span class="line">#异或运算</span><br><span class="line">def xor(a, b):</span><br><span class="line">    return bytes([x ^ y for x, y in zip(a, b)])</span><br><span class="line"></span><br><span class="line">#看CBC那篇文章就知道这个顺序是怎么回事了</span><br><span class="line">M1 = xor(m2, iv)</span><br><span class="line">M2 = xor(c1, m3)</span><br><span class="line">print(M1 + M2)</span><br><span class="line"># b&#x27;flag&#123;HOw_c4REfu1Ly_yOu_O65ERve!&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="4、没e这能玩？"><a href="#4、没e这能玩？" class="headerlink" title="4、没e这能玩？"></a>4、没e这能玩？</h2><h3 id="题目如下-11"><a href="#题目如下-11" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import random</span><br><span class="line">import sympy</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(b&#x27;flag&#123;*****&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">r = getPrime(512)</span><br><span class="line">h1 = 1*p + 1*q + 1*r</span><br><span class="line">h2 = 2*p + 3*q + 3*r</span><br><span class="line">h3 = 9*p + 9*q + 6*r</span><br><span class="line">print( &quot;hint_of_pqr=&quot; , h1 , h2 , h3 )</span><br><span class="line"></span><br><span class="line">e = getPrime(64)</span><br><span class="line">a_big_prime = getPrime( 512 )</span><br><span class="line">hint = pow(a_big_prime,e,2**512)</span><br><span class="line">print( &quot;big_prime is: &quot; , a_big_prime )</span><br><span class="line">print( &quot;hint is: &quot; , hint )</span><br><span class="line"></span><br><span class="line">n = p*q*r</span><br><span class="line">c = pow( m , e , n )</span><br><span class="line">print( &quot;c=&quot; , c )</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">hint_of_pqr= 31142735238530997044538008977536563192992446755282526163704097825748037157617958329370018716097695151853567914689441893020256819531959835133410539308633497 83244528500940968089139246591338465098116598400576450028712055615289379610182828415628469144649133540240957232351546273836449824638227295064400834828714760 248913032538718194100308575844236838621741774207751338576000867909773931464854644505429950530402814602955352740032796855486666128271187734043696395254816172 </span><br><span class="line">big_prime is:  10340528340717085562564282159472606844701680435801531596688324657589080212070472855731542530063656135954245247693866580524183340161718349111409099098622379</span><br><span class="line">hint is:  1117823254118009923270987314972815939020676918543320218102525712576467969401820234222225849595448982263008967497960941694470967789623418862506421153355571 </span><br><span class="line">c= 999238457633695875390868312148578206874085180328729864031502769160746939370358067645058746087858200698064715590068454781908941878234704745231616472500544299489072907525181954130042610756999951629214871917553371147513692253221476798612645630242018686268404850587754814930425513225710788525640827779311258012457828152843350882248473911459816471101547263923065978812349463656784597759143314955463199850172786928389414560476327593199154879575312027425152329247656310</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>离散对数问题，用 sympy.discrete_log() 可以直接求出 e 的值</p><h3 id="解题脚本如下-5"><a href="#解题脚本如下-5" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from sympy import discrete_log</span><br><span class="line"></span><br><span class="line">#已知</span><br><span class="line">h1 = 31142735238530997044538008977536563192992446755282526163704097825748037157617958329370018716097695151853567914689441893020256819531959835133410539308633497</span><br><span class="line">h2 = 83244528500940968089139246591338465098116598400576450028712055615289379610182828415628469144649133540240957232351546273836449824638227295064400834828714760</span><br><span class="line">h3 = 248913032538718194100308575844236838621741774207751338576000867909773931464854644505429950530402814602955352740032796855486666128271187734043696395254816172</span><br><span class="line">big_prime = 10340528340717085562564282159472606844701680435801531596688324657589080212070472855731542530063656135954245247693866580524183340161718349111409099098622379</span><br><span class="line">hint = 1117823254118009923270987314972815939020676918543320218102525712576467969401820234222225849595448982263008967497960941694470967789623418862506421153355571</span><br><span class="line">c = 999238457633695875390868312148578206874085180328729864031502769160746939370358067645058746087858200698064715590068454781908941878234704745231616472500544299489072907525181954130042610756999951629214871917553371147513692253221476798612645630242018686268404850587754814930425513225710788525640827779311258012457828152843350882248473911459816471101547263923065978812349463656784597759143314955463199850172786928389414560476327593199154879575312027425152329247656310</span><br><span class="line"></span><br><span class="line">p = int(3*h1 - h2)</span><br><span class="line">r = int((9*h1 - h3)//3)</span><br><span class="line">q = int(h1 - p - r)</span><br><span class="line"></span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-1)*(q-1)*(r-1)</span><br><span class="line"></span><br><span class="line">#离散对数求解，如果对于一个整数b和质数p的一个原根a，可以找到一个唯一的指数i，使得b = a ^ i (mod p)，其中0&lt;=i&lt;=p成立，那么指数i称为b的以a为基数的模p的离散对数</span><br><span class="line">e = discrete_log(2**512,hint,big_prime)</span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line">#求解私钥</span><br><span class="line">d = pow(e,-1,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"># b&#x27;flag&#123;th1s_2s_A_rea119_f34ggg&#125;&#x27;</span><br></pre></td></tr></table></figure><hr><h1 id="week-4"><a href="#week-4" class="headerlink" title="week 4"></a>week 4</h1><h2 id="1、圣石匕首"><a href="#1、圣石匕首" class="headerlink" title="1、圣石匕首"></a>1、圣石匕首</h2><h3 id="题目如下-12"><a href="#题目如下-12" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">beta=0.37</span><br><span class="line">delta=0.01</span><br><span class="line">n=round((1-2*beta-2*delta)/((1-beta)^2-2*delta-beta),6)</span><br><span class="line">e= 3668637434348843171145584606519031375027610199908169273169275927238735031431533260375377791001464799116453803408104076615710166171199990283470548282669948353598733020244755959461974603778630346457439345913209321194112256348302765254052193562603687450740346132207444615610078198488883539133291840346099727880587092122957231085658576850601488737629051252914095889313671875244094452330062619943781809984690384476868543570724769198985172300665613239047649089399919032152539462701309393130614829962670866062380816370571057536421400102100259975636785825540933280194583888638501981649650640939392658268133881679239293596283</span><br><span class="line">N= 9748523098652101859947730585916490335896800943242955095820326993765071194474558998322598145898741779502734772138283011560029368500998354183150180904846368209977332058847768859238711047784703104535311583123388923571789764758869419482184613566672922481672444028753365755071127320541645016370072493604532087980626825687519083734367691341907014061379844209864141989961751681235215504772582878202048494707090104738899927036896915997556102574747166491969027546256022019959716418675672979328622656831990050058120299353807110233202113906317969377201045402271911946244076903611612303290556012512559696538977841061277173754331</span><br><span class="line">c= 5374936627659221745209010619827617207565185520404653329184605916859755641352457088986635357806048863755173540232471505333583684733535121482637476692432365062808450583470788320547816186936317927449796090525477205337038591439577855884910604383190932340306435201976465543731935147881754136301375206828970248293731391543905441514528959500307972606931927112031018356411970001312995489429650903529877904694901310020882390008248466887950986326522740278880600110217817950511478637493101027659292006016454642135508207492151610829525082829566392116546434101694921106423469015683277992978077101831969525458693031031468092418427</span><br><span class="line">n=int(n+1)</span><br><span class="line">#print(n)</span><br><span class="line">m=int(n*(1-beta))</span><br><span class="line">X=int(pow(N,delta))</span><br><span class="line">Y=int(pow(N,delta+beta))</span><br><span class="line">Z.&lt;x,y&gt;=ZZ[]</span><br><span class="line">L=Matrix(ZZ,n,n)</span><br><span class="line">f=e*x-y</span><br><span class="line">for i in range(n):</span><br><span class="line">    g=list(N^max(0,m-i)*x^(n-1-i)*f^i)</span><br><span class="line">    for j in range(len(g)):</span><br><span class="line">        L[i,j]=g[j][0]*X^(n-1-j)*Y^j</span><br><span class="line">L=L.LLL()[0]</span><br><span class="line">coeff=[]</span><br><span class="line">for i in range(n):</span><br><span class="line">    coeff.append((L[i]//(X^(n-1-i)*Y^i),&#x27;x&#x27;+&#x27;**&#x27;+str(n-1-i)+&#x27;*y&#x27;+&#x27;**&#x27;+str(i)))</span><br><span class="line">s=&#x27;&#x27;</span><br><span class="line">for i in range(len(coeff)):</span><br><span class="line">    s+=str(coeff[i][0])+&#x27;*&#x27;+coeff[i][1]+&#x27;+&#x27;</span><br><span class="line">f=eval(s[:-1])</span><br><span class="line">factored_f = f.factor()</span><br><span class="line">first_polynomial = factored_f[0][0]</span><br><span class="line">first_coefficient = first_polynomial.coefficients()[0]</span><br><span class="line">k = first_coefficient + 1</span><br><span class="line">dp = first_polynomial.coefficients()[1]</span><br><span class="line">p=(e*dp-1)//k+1</span><br><span class="line">q=N//p</span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=pow(c,d,N)</span><br><span class="line">print(bytes.fromhex(hex(m)[2:]))</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">题目给了一个 </font><code>.sage</code><font style="color:rgb(60, 60, 60);"> 文件，内部语法格式为 Python，但是要求安装并且配置 </font><a href="https://mirrors.aliyun.com/sagemath/win/index.html">SageMath</a><font style="color:rgb(60, 60, 60);"> 的环境才能执行。可以参照</font><a href="https://zhuanlan.zhihu.com/p/297736314">此篇文章</a><font style="color:rgb(60, 60, 60);">配置 SageMath 在 Jupyter 中的运行环境。</font></p><p><font style="color:rgb(60, 60, 60);">然后在 SageMath 环境中运行题目所给的脚本即可。</font></p><h2 id="2、欧拉欧拉！！"><a href="#2、欧拉欧拉！！" class="headerlink" title="2、欧拉欧拉！！"></a>2、欧拉欧拉！！</h2><h3 id="题目如下-13"><a href="#题目如下-13" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;*********&#125;&#x27;</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_prime(bits):</span><br><span class="line">    while True:</span><br><span class="line">        p = getPrime(bits)</span><br><span class="line">        x = (1 &lt;&lt; bits) - 1 ^ p</span><br><span class="line">        for i in range(-10, 11):</span><br><span class="line">            if isPrime(x + i):</span><br><span class="line">                return p, x + i, i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q, i = get_prime(512)</span><br><span class="line">n = p * q</span><br><span class="line">e = 65537</span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(&quot;c =&quot;, c)</span><br><span class="line">print(&quot;n =&quot;, n)</span><br><span class="line">print(&quot;i =&quot;, i)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c = 14859652090105683079145454585893160422247900801288656111826569181159038438427898859238993694117308678150258749913747829849091269373672489350727536945889312021893859587868138786640133976196803958879602927438349289325983895357127086714561807181967380062187404628829595784290171905916316214021661729616120643997</span><br><span class="line">n = 18104347461003907895610914021247683508445228187648940019610703551961828343286923443588324205257353157349226965840638901792059481287140055747874675375786201782262247550663098932351593199099796736521757473187142907551498526346132033381442243277945568526912391580431142769526917165011590824127172120180838162091</span><br><span class="line">i = -3</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>(1 &lt;&lt; bits) - 1是一个位掩码，它的二进制表现形式是 bites 个 1 。这个位掩码与 p 进行异或（^）操作，得到结果 x。则 p + x &#x3D; 2⁵¹² - 1 ,推导得 p + q &#x3D; 2⁵¹² + i - 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 0b1001</span><br><span class="line">b = a ^ 0b1111 = 0b0110</span><br><span class="line">a + b = 1111</span><br></pre></td></tr></table></figure><p>所以 phi &#x3D; (p - 1)(q - 1) &#x3D; pq - (p + q) +1 &#x3D; n - (p + q) + 1</p><h3 id="解题脚本如下-6"><a href="#解题脚本如下-6" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">c = 14859652090105683079145454585893160422247900801288656111826569181159038438427898859238993694117308678150258749913747829849091269373672489350727536945889312021893859587868138786640133976196803958879602927438349289325983895357127086714561807181967380062187404628829595784290171905916316214021661729616120643997</span><br><span class="line">n = 18104347461003907895610914021247683508445228187648940019610703551961828343286923443588324205257353157349226965840638901792059481287140055747874675375786201782262247550663098932351593199099796736521757473187142907551498526346132033381442243277945568526912391580431142769526917165011590824127172120180838162091</span><br><span class="line">i = -3</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">phi = n - 2**512 + 2 - i</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="3、俱以我之名"><a href="#3、俱以我之名" class="headerlink" title="3、俱以我之名"></a>3、俱以我之名</h2><h3 id="题目如下-14"><a href="#题目如下-14" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def pad(msg, nbits):</span><br><span class="line">    pad_length = nbits - len(msg) * 8 - 8</span><br><span class="line">    assert pad_length &gt;= 0</span><br><span class="line">    pad = random.getrandbits(pad_length).to_bytes((pad_length + 7) // 8, &quot;big&quot;)</span><br><span class="line">    padded_msg = pad[:len(pad)//2] + b&quot;\x00&quot; + msg + pad[len(pad)//2:]</span><br><span class="line"></span><br><span class="line">    return padded_msg</span><br><span class="line"></span><br><span class="line">def All_in_my_name(p, q):</span><br><span class="line">    #开启三技能&lt;俱以我之名&gt;后，维娜立即在周围八格可部署地面召唤“黄金盟誓(Golden_Oath)”;对RSA造成真实伤害。</span><br><span class="line">    Golden_Oath = (p-114)*(p-514)*(p+114)*(p+514)*(q-1919)*(q-810)*(q+1919)*(q+810)</span><br><span class="line">    x = bytes_to_long(pad(gift, random.randint(bytes_to_long(gift).bit_length(), 512)))</span><br><span class="line">    y = inverse(x, Golden_Oath)</span><br><span class="line">    return y</span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;?????&#125;&#x27;</span><br><span class="line">gift = b&#x27;?????&#x27;</span><br><span class="line">assert gift[:3] == b&#x27;end&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line">c = pow(bytes_to_long(flag), e,n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line">print(f&#x27;All_in_my_name = &#123;All_in_my_name(p, q)&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 141425071303405369267688583480971314815032581405819618511016190023245950842423565456025578726768996255928405749476366742320062773129810617755239412667111588691998380868379955660483185372558973059599254495581547016729479937763213364591413126146102483671385285672028642742654014426993054793378204517214486744679</span><br><span class="line">c = 104575090683421063990494118954150936075812576661759942057772865980855195301985579098801745928083817885393369435101522784385677092942324668770336932487623099755265641877712097977929937088259347596039326198580193524065645826424819334664869152049049342316256537440449958526473368110002271943046726966122355888321</span><br><span class="line">All_in_my_name = 217574365691698773158073738993996550494156171844278669077189161825491226238745356969468902038533922854535578070710976002278064001201980326028443347187697136216041235312192490502479015081704814370278142850634739391445817028960623318683701439854891399013393469200033510113406165952272497324443526299141544564964545937461632903355647411273477731555390580525472533399606416576667193890128726061970653201509841276177937053500663438053151477018183074107182442711656306515049473061426018576304621373895497210927151796054531814746265988174146635716820986208719319296233956243559891444122410388128465897348458862921336261068868678669349968117097659195490792407141240846445006330031546721426459458395606505793093432806236790060342049066284307119546018491926250151057087562126580602631912562103705681810139118673506298916800665912859765635644796622382867334481599049728329203920912683317422430015635091565073203588723830512169316991557606976424732212785533550238950903858852917097354055547392337744369560947616517041907362337902584102983344969307971888314998036201926257375424706901999793914432814775462333942995267009264203787170147555384279151485485660683109778282239772043598128219664150933315760352868905799949049880756509591090387073778041</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">维纳攻击思想，原理可以参照 Xenny 师傅的文章学习：</font><a href="https://www.nssctf.cn/note/set/8">wiener 攻击</a><font style="color:rgb(60, 60, 60);">。</font></p><p><font style="color:rgb(60, 60, 60);">详细证明可以看维基百科：</font><a href="https://en.wikipedia.org/wiki/Wiener%27s_attack">Wiener’s attack</a></p><p><font style="color:rgb(60, 60, 60);">我们可以借助连分数来分解</font><font style="color:rgb(60, 60, 60);"> </font><font style="color:rgb(60, 60, 60);">p</font><font style="color:rgb(60, 60, 60);"> </font><font style="color:rgb(60, 60, 60);">和</font><font style="color:rgb(60, 60, 60);"> </font><font style="color:rgb(60, 60, 60);">q</font><font style="color:rgb(60, 60, 60);"> </font><font style="color:rgb(60, 60, 60);">来对 RSA 打真伤。</font></p><h3 id="解题脚本如下-7"><a href="#解题脚本如下-7" class="headerlink" title="解题脚本如下"></a><font style="color:rgb(60, 60, 60);">解题脚本如下</font></h3><p><font style="color:rgb(60, 60, 60);">在这里我们有</font></p><p><font style="color:rgb(60, 60, 60);">Golden_Oath &#x3D; (p-114)(p-514)(p+114)(p+514)(p-1919)(p-810)(p+1919)(p+810)≈N⁴</font></p><p><font style="color:rgb(60, 60, 60);">y&#x2F;Golden_Oath ≈ k&#x2F;x</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">n = 141425071303405369267688583480971314815032581405819618511016190023245950842423565456025578726768996255928405749476366742320062773129810617755239412667111588691998380868379955660483185372558973059599254495581547016729479937763213364591413126146102483671385285672028642742654014426993054793378204517214486744679</span><br><span class="line">c = 104575090683421063990494118954150936075812576661759942057772865980855195301985579098801745928083817885393369435101522784385677092942324668770336932487623099755265641877712097977929937088259347596039326198580193524065645826424819334664869152049049342316256537440449958526473368110002271943046726966122355888321</span><br><span class="line">y = 217574365691698773158073738993996550494156171844278669077189161825491226238745356969468902038533922854535578070710976002278064001201980326028443347187697136216041235312192490502479015081704814370278142850634739391445817028960623318683701439854891399013393469200033510113406165952272497324443526299141544564964545937461632903355647411273477731555390580525472533399606416576667193890128726061970653201509841276177937053500663438053151477018183074107182442711656306515049473061426018576304621373895497210927151796054531814746265988174146635716820986208719319296233956243559891444122410388128465897348458862921336261068868678669349968117097659195490792407141240846445006330031546721426459458395606505793093432806236790060342049066284307119546018491926250151057087562126580602631912562103705681810139118673506298916800665912859765635644796622382867334481599049728329203920912683317422430015635091565073203588723830512169316991557606976424732212785533550238950903858852917097354055547392337744369560947616517041907362337902584102983344969307971888314998036201926257375424706901999793914432814775462333942995267009264203787170147555384279151485485660683109778282239772043598128219664150933315760352868905799949049880756509591090387073778041</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">class ContinuedFraction():</span><br><span class="line">    def __init__(self, numerator, denumerator):</span><br><span class="line">        self.numberlist = []</span><br><span class="line">        self.fractionlist = [] </span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    def GenerateNumberList(self, numerator, denumerator):</span><br><span class="line">        while numerator != 1:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    def GenerateFractionList(self):</span><br><span class="line">        self.fractionlist.append([self.numberlist[0], 1])</span><br><span class="line">        for i in range(1, len(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = 1</span><br><span class="line">            for j in range(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - 1]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line">n = pow(n,4)</span><br><span class="line">a = ContinuedFraction(y, n)</span><br><span class="line">for k, x in a.fractionlist:</span><br><span class="line">    #判断哪一个是我们所需的x</span><br><span class="line">    if b&#x27;end&#x27; in long_to_bytes(x):</span><br><span class="line">        print(x)</span><br><span class="line">        print(k)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(x))</span><br><span class="line">Golden_Oath = (x*y-1)//k</span><br><span class="line">print(Golden_Oath)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">103697213497220650500739251621743955651854455782387759691953279488676501281257640431561</span><br><span class="line">56398712132783063027132828918468670442692437484816382768162819797891220782528221182512</span><br><span class="line">b&#x27;5`\xf4\xf6t\xa3\x00end1n9_A_G2@nd_Ov3RTu2e\x1c\x13&quot;H\x0f\xc9&#x27;</span><br><span class="line">#400042032831098007958224589201074030167511216235146696966889080122265111949126155016295896501799032251334875101500882585261911204171467951139573150807043239564581043145433814155757093989016940205116328236031283789686099217459678429270939065783626769903068201144816933538226628329294355184200590029028565011348654002192085571172863125467318356642528249715812871925525776008917314884490518613080652875623759460663908309369135829140204137773254011408135516737187092812588388209697036416805176286184831779945910125467423823737934475944632379524991238593952097013985394648562259886597816452815669024660257170465154297959999722533255899489096196292778430386116108069053440749172609798098777046509743030019115282253351905670418760503352277616008654327326851761671410084489662135479597061419403235762755010286075975241013273964842915146756571330207605591193457296347769260777032489271278979332616929093357929916558230665466587125254822846466292980360420737307459205352964255972268278992730637939153686420457279334894980200862788513296786385507282999530973028293157179873999483225505784146175328159014143540959190522315340971608002638786511995717564457749873410017343184395040614025573440462522210939180555090227730875845671821586191943346000</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">至此，Golden_Oath、n以及它们和p、q关系均已知，利用两个等式解个二元方程即可。</font></p><p><font style="color:rgb(60, 60, 60);">这里我们使用sympy库解方程</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Golden_Oath = 400042032831098007958224589201074030167511216235146696966889080122265111949126155016295896501799032251334875101500882585261911204171467951139573150807043239564581043145433814155757093989016940205116328236031283789686099217459678429270939065783626769903068201144816933538226628329294355184200590029028565011348654002192085571172863125467318356642528249715812871925525776008917314884490518613080652875623759460663908309369135829140204137773254011408135516737187092812588388209697036416805176286184831779945910125467423823737934475944632379524991238593952097013985394648562259886597816452815669024660257170465154297959999722533255899489096196292778430386116108069053440749172609798098777046509743030019115282253351905670418760503352277616008654327326851761671410084489662135479597061419403235762755010286075975241013273964842915146756571330207605591193457296347769260777032489271278979332616929093357929916558230665466587125254822846466292980360420737307459205352964255972268278992730637939153686420457279334894980200862788513296786385507282999530973028293157179873999483225505784146175328159014143540959190522315340971608002638786511995717564457749873410017343184395040614025573440462522210939180555090227730875845671821586191943346000</span><br><span class="line">from sympy import symbols, Eq, solve</span><br><span class="line"></span><br><span class="line">p, q = symbols(&#x27;p q&#x27;)</span><br><span class="line">equation1 = Eq(p * q, n)</span><br><span class="line">equation2 = Eq((p-114)*(p-514)*(p+114)*(p+514)*(q-1919)*(q-810)*(q+1919)*(q+810), Golden_Oath)</span><br><span class="line">solutions = solve((equation1, equation2), (p, q))</span><br><span class="line">print(f&quot;p 和 q 的解: &#123;solutions&#125;&quot;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">p 和 q 的解: [(-11256874906034337229658272553494271626180719204801621165552253304119314454014247481847595578004383239651599038196432752043642616511808644606155091511313329, -12563439896413287507369191021540890661182794010085857062984791988214078294298809633469029528754549607502031091193150571585844351836163514784874848514208151), (11256874906034337229658272553494271626180719204801621165552253304119314454014247481847595578004383239651599038196432752043642616511808644606155091511313329, 12563439896413287507369191021540890661182794010085857062984791988214078294298809633469029528754549607502031091193150571585844351836163514784874848514208151)]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">分解出p和q我们就成功对RSA打出了最真实的伤害，然后常规流程抬走</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = 11256874906034337229658272553494271626180719204801621165552253304119314454014247481847595578004383239651599038196432752043642616511808644606155091511313329</span><br><span class="line">q = 12563439896413287507369191021540890661182794010085857062984791988214078294298809633469029528754549607502031091193150571585844351836163514784874848514208151</span><br><span class="line">d = inverse(e, (p-1)*(q-1))</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">#b&#x27;flag&#123;rE@L_d@m@9e_15_7h3_mo5t_au7hEn7ic_dam49E&#125;&#x27;</span><br></pre></td></tr></table></figure><hr><h1 id="week-5"><a href="#week-5" class="headerlink" title="week 5"></a>week 5</h1><h2 id="1、没e也能玩"><a href="#1、没e也能玩" class="headerlink" title="1、没e也能玩"></a>1、没e也能玩</h2><h3 id="题目如下-15"><a href="#题目如下-15" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">p = getPrime(1024)</span><br><span class="line">q = getPrime(1024)</span><br><span class="line">d = inverse(65537,(p-1)*(q-1))</span><br><span class="line">dp = d %(p-1)</span><br><span class="line">dq = d%(q-1)</span><br><span class="line">print(f&#x27;c=&#123;pow(bytes_to_long(flag),e,p*q)&#125;&#x27;)</span><br><span class="line">print(f&#x27;p=&#123;p&#125;&#x27;)</span><br><span class="line">print(f&#x27;q=&#123;q&#125;&#x27;)</span><br><span class="line">print(f&#x27;dp=&#123;dp&#125;&#x27;)</span><br><span class="line">print(f&#x27;dq=&#123;dq&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;&#x27;</span><br><span class="line">c=312026920216195772014255984174463085443866592575942633449581804171108045852080517840578408476885673600123673447592477875543106559822653280458539889975125069364584140981069913341705738633426978886491359036285144974311751490792757751756044409664421663980721578870582548395096887840688928684149014816557276765747135567714257184475027270111822159712532338590457693333403200971556224662094381891648467959054115723744963414673861964744567056823925630723343002325605154661959863849738333074326769879861280895388423162444746726568892877802824353858845944856881876742211956986853244518521508714633279380808950337611574412909</span><br><span class="line">p=108043725609186781791705090463399988837848128384507136697546885182257613493145758848215714322999196482303958182639388180063206708575175264502030010971971799850889123915580518613554382722069874295016841596099030496486069157061211091761273568631799006187376088457421848367280401857536410610375012371577177832001</span><br><span class="line">q=121590551121540247114817509966135120751936084528211093275386628666641298457070126234836053337681325952068673362753408092990553364818851439157868686131416391201519794244659155411228907897025948436021990520853498462677797392855335364006924106615008646396883330251028071418465977013680888333091554558623089051503</span><br><span class="line">dp=11282958604593959665264348980446305500804623200078838572989469798546944577064705030092746827389207634235443944672230537015008113180165395276742807804632116181385860873677969229460704569172318227491268503039531329141563655811632035522134920788501646372986281785901019732756566066694831838769040155501078857473</span><br><span class="line">dq=46575357360806054039250786123714177813397065260787208532360436486982363496441528434309234218672688812437737096579970959403617066243685956461527617935564293219447837324227893212131933165188205281564552085623483305721400518031651417947568896538797580895484369480168587284879837144688420597737619751280559493857</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="解题脚本如下-8"><a href="#解题脚本如下-8" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">c=312026920216195772014255984174463085443866592575942633449581804171108045852080517840578408476885673600123673447592477875543106559822653280458539889975125069364584140981069913341705738633426978886491359036285144974311751490792757751756044409664421663980721578870582548395096887840688928684149014816557276765747135567714257184475027270111822159712532338590457693333403200971556224662094381891648467959054115723744963414673861964744567056823925630723343002325605154661959863849738333074326769879861280895388423162444746726568892877802824353858845944856881876742211956986853244518521508714633279380808950337611574412909</span><br><span class="line">p=108043725609186781791705090463399988837848128384507136697546885182257613493145758848215714322999196482303958182639388180063206708575175264502030010971971799850889123915580518613554382722069874295016841596099030496486069157061211091761273568631799006187376088457421848367280401857536410610375012371577177832001</span><br><span class="line">q=121590551121540247114817509966135120751936084528211093275386628666641298457070126234836053337681325952068673362753408092990553364818851439157868686131416391201519794244659155411228907897025948436021990520853498462677797392855335364006924106615008646396883330251028071418465977013680888333091554558623089051503</span><br><span class="line">d = inverse(65537,(p-1)*(q-1))</span><br><span class="line">n = p*q</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"># b&#x27;flag&#123;No_course_e_can_play&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="2、格格你好棒"><a href="#2、格格你好棒" class="headerlink" title="2、格格你好棒"></a>2、格格你好棒</h2><h3 id="题目如下-16"><a href="#题目如下-16" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">flag = b&#x27;******&#x27;</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">a = getPrime(1024)</span><br><span class="line">b = getPrime(1536)</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">r = random.randint(2**8, 2**9)</span><br><span class="line">assert ((p+2*r) * 3*a + q) % b &lt; 70</span><br><span class="line"></span><br><span class="line">c = pow(m, 0x10001, p*q)</span><br><span class="line"></span><br><span class="line">print(f&#x27;c =&#x27;, c)</span><br><span class="line">print(f&#x27;a =&#x27;, a)</span><br><span class="line">print(f&#x27;b =&#x27;, b)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c = 75671328500214475056134178451562126288749723392201857886683373274067151096013132141603734799638338446362190819013087028001291030248155587072037662295281180020447012070607162188511029753418358484745755426924178896079516327814868477319474776976247356213687362358286132623490797882893844885783660230132191533753</span><br><span class="line">a = 99829685822966835958276444400403912618712610766908190376329921929407293564120124118477505585269077089315008380226830398574538050051718929826764449053677947419802792746249036134153510802052121734874555372027104653797402194532536147269634489642315951326590902954822775489385580372064589623985262480894316345817</span><br><span class="line">b = 2384473327543107262477269141248562917518395867365960655318142892515553817531439357316940290934095375085624218120779709239118821966188906173260307431682367028597612973683887401344727494920856592020970209197406324257478251502340099862501536622889923455273016634520507179507645734423860654584092233709560055803703801064153206431244982586989154685048854436858839309457140702847482240801158808592615931654823643778920270174913454238149949865979522520566288822366419746</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>因为((p+2<em>r) * 3</em>a + q) % b &lt; 70，所以</p><p>x ≡ ((p+2<em>r) * 3</em>a + q) % b</p><p>x &#x3D; ((p+2<em>r) * 3</em>a + q) + k*b</p><p>x - q &#x3D; (p+2<em>r) * 3</em>a + k*b</p><p>构造格</p><p><img src="https://pic.imgdb.cn/item/673ef5c2d29ded1a8cde99fc.jpg"></p><h3 id="解题脚本如下-9"><a href="#解题脚本如下-9" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import sympy</span><br><span class="line">c = 75671328500214475056134178451562126288749723392201857886683373274067151096013132141603734799638338446362190819013087028001291030248155587072037662295281180020447012070607162188511029753418358484745755426924178896079516327814868477319474776976247356213687362358286132623490797882893844885783660230132191533753</span><br><span class="line">a = 99829685822966835958276444400403912618712610766908190376329921929407293564120124118477505585269077089315008380226830398574538050051718929826764449053677947419802792746249036134153510802052121734874555372027104653797402194532536147269634489642315951326590902954822775489385580372064589623985262480894316345817</span><br><span class="line">b = 2384473327543107262477269141248562917518395867365960655318142892515553817531439357316940290934095375085624218120779709239118821966188906173260307431682367028597612973683887401344727494920856592020970209197406324257478251502340099862501536622889923455273016634520507179507645734423860654584092233709560055803703801064153206431244982586989154685048854436858839309457140702847482240801158808592615931654823643778920270174913454238149949865979522520566288822366419746</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># sage</span><br><span class="line">B = matrix(ZZ,[[b,0],[3*a,1]])</span><br><span class="line">L = B.LLL()</span><br><span class="line">qq, pp = L[0]</span><br><span class="line">print(qq) # x - q</span><br><span class="line">print(pp) # p + 2*r</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">qq = 12553079242047273200410744010920686742714472539778118466643782351818207654054816235539817026967922181500347097851997373426957983731540358100874779586363161</span><br><span class="line">pp = -7961804506966720608961911712423186156751023218208634880812696209250224567983435028132223624549972986085731566218918056301880603380822282526191335173035835</span><br><span class="line"></span><br><span class="line">pp = -pp  # 注1</span><br><span class="line">for i in range(2**8, 2**9):</span><br><span class="line">    for j in range(70):</span><br><span class="line">        p = pp - 2*i    # 注2</span><br><span class="line">        q = qq + j      # 注3</span><br><span class="line">        phi = (p-1)*(q-1)</span><br><span class="line">        if sympy.gcd(phi, 65537) != 1:</span><br><span class="line">            continue</span><br><span class="line">        d = inverse(65537, phi)</span><br><span class="line">        n = p*q</span><br><span class="line">        m = pow(c, d, n)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        if b&#x27;flag&#123;&#x27; in flag:</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br><span class="line"># b&#x27;flag&#123;u_are_@_master_of_latt1ce_Crypt0gr@phy&#125;&#x27;</span><br></pre></td></tr></table></figure><p>注1：为什么要进行pp &#x3D; -pp呢？因为 LLL 算法仅仅是在格上找到符合条件的短向量，并不保证矢量的方向，pp<font style="color:rgb(6, 6, 7);">代表的是 p + 2 * r 的近似值，而 p 是一个大素数，所以 pp 应该是正数。</font></p><p><font style="color:rgb(6, 6, 7);"></font></p><p><font style="color:rgb(6, 6, 7);">注2：因为 pp ≈ p + 2 * r，所以有p &#x3D; pp - 2*i</font></p><p><font style="color:rgb(6, 6, 7);"></font></p><p><font style="color:rgb(6, 6, 7);">注3：同理，qq ≈ x - q，这意味着 qq 是 x 和 q 之间的差，又因为 q 是一个大素数，x &lt; 70，所以 q &#x3D; qq + j</font></p><h2 id="3、RSA？cmd5！"><a href="#3、RSA？cmd5！" class="headerlink" title="3、RSA？cmd5！"></a>3、RSA？cmd5！</h2><h3 id="题目如下-17"><a href="#题目如下-17" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"># 什么？你说你用md5给rsa签名了？！</span><br><span class="line"></span><br><span class="line">m = &#x27;*******&#x27;</span><br><span class="line">assert len(m) == 7</span><br><span class="line">flag = &#x27;flag&#123;th1s_1s_my_k3y:&#x27; + m + &#x27;0x&#x27; + hashlib.sha256(m.encode()).hexdigest() + &#x27;&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(512)</span><br><span class="line">q = getStrongPrime(512)</span><br><span class="line">n = p * q</span><br><span class="line">e = 65537</span><br><span class="line">phi = (p - 1) * (q - 1)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_MD5(m0):</span><br><span class="line">    import hashlib</span><br><span class="line">    md5_object = hashlib.md5(m0.encode())</span><br><span class="line">    md5_result = md5_object.hexdigest()</span><br><span class="line">    return md5_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_s(m0, d0, n0):</span><br><span class="line">    hm0 = get_MD5(m0)</span><br><span class="line">    hm1 = bytes_to_long(hm0.encode())</span><br><span class="line">    s0 = pow(hm1, d0, n0)</span><br><span class="line">    return s0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def rsa_encode(m0, e0, n0):</span><br><span class="line">    m1 = bytes_to_long(m0.encode())</span><br><span class="line">    c0 = pow(m1, e0, n0)</span><br><span class="line">    return c0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_flag(m0):  # 请用这个函数来转m得到flag</span><br><span class="line">    import hashlib</span><br><span class="line">    flag = &#x27;flag&#123;th1s_1s_my_k3y:&#x27; + m0 + &#x27;0x&#x27; + hashlib.sha256(m0.encode()).hexdigest() + &#x27;&#125;&#x27;</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = get_s(m, d, n)</span><br><span class="line">c = rsa_encode(flag, e, n)</span><br><span class="line"></span><br><span class="line">print(&quot;密文c =&quot;, c)</span><br><span class="line">print(&quot;签名s =&quot;, s)</span><br><span class="line">print(&quot;公钥[n,e] =&quot;, [n, e])</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">密文c = 119084320846787611587774426118526847905825678869032529318497425064970463356147909835330423466179802531093233559613714033492951177656433798856482195873924140269461792479008703758436687940228268475598134411304167494814557384094637387369282900460926092035234233538644197114822992825439656673482850515654334379332</span><br><span class="line">签名s = 5461514893126669960233658468203682813465911805334274462134892270260355037191167357098405392972668890146716863374229152116784218921275571185229135409696720018765930919309887205786492284716906060670649040459662723215737124829497658722113929054827469554157634284671989682162929417551313954916635460603628116503</span><br><span class="line">公钥[n,e] = [139458221347981983099030378716991183653410063401398496859351212711302933950230621243347114295539950275542983665063430931475751013491128583801570410029527087462464558398730501041018349125941967135719526654701663270142483830687281477000567117071676521061576952568958398421029292366101543468414270793284704549051, 65537]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="解题脚本如下-10"><a href="#解题脚本如下-10" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">c = 119084320846787611587774426118526847905825678869032529318497425064970463356147909835330423466179802531093233559613714033492951177656433798856482195873924140269461792479008703758436687940228268475598134411304167494814557384094637387369282900460926092035234233538644197114822992825439656673482850515654334379332</span><br><span class="line">s = 5461514893126669960233658468203682813465911805334274462134892270260355037191167357098405392972668890146716863374229152116784218921275571185229135409696720018765930919309887205786492284716906060670649040459662723215737124829497658722113929054827469554157634284671989682162929417551313954916635460603628116503</span><br><span class="line">n = 139458221347981983099030378716991183653410063401398496859351212711302933950230621243347114295539950275542983665063430931475751013491128583801570410029527087462464558398730501041018349125941967135719526654701663270142483830687281477000567117071676521061576952568958398421029292366101543468414270793284704549051</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">hm1 = pow(s, e, n)</span><br><span class="line"></span><br><span class="line">hm0 = long_to_bytes(hm1)</span><br><span class="line"></span><br><span class="line">print(hm0)</span><br><span class="line"></span><br><span class="line"># 把hm0的值放到cmd5解密网站上求解得到m</span><br><span class="line">m = &quot;adm0n12&quot;</span><br><span class="line"></span><br><span class="line">def get_flag(m0):  # 请用这个函数来转m得到flag</span><br><span class="line">    import hashlib</span><br><span class="line">    flag = &#x27;flag&#123;th1s_1s_my_k3y:&#x27; + m0 + &#x27;0x&#x27; + hashlib.sha256(m0.encode()).hexdigest() + &#x27;&#125;&#x27;</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">print(get_flag(m))</span><br><span class="line"># flag&#123;th1s_1s_my_k3y:adm0n120xbfab06114aa460b85135659e359fe443f9d91950ca95cbb2cbd6f88453e2b08b&#125;</span><br></pre></td></tr></table></figure><h2 id="4、easy-ecc"><a href="#4、easy-ecc" class="headerlink" title="4、easy_ecc"></a>4、easy_ecc</h2><h3 id="题目如下-18"><a href="#题目如下-18" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import * # type: ignore</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">p = 64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br><span class="line">a = 111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br><span class="line">b = 89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">m = E.random_point()</span><br><span class="line">G = E.random_point()</span><br><span class="line">k = 86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><span class="line">K = k * G</span><br><span class="line">r = getPrime(256)</span><br><span class="line">c1 = m + r * K</span><br><span class="line">c2 = r * G</span><br><span class="line">c_left =bytes_to_long(flag[:len(flag)//2]) * m[0]</span><br><span class="line">c_right = bytes_to_long(flag[len(flag)//2:]) * m[1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(f&quot;c1 = &#123;c1&#125;&quot;)</span><br><span class="line">print(f&quot;c2 = &#123;c2&#125;&quot;)</span><br><span class="line">print(f&quot;cipher_left = &#123;c_left&#125;&quot;)</span><br><span class="line">print(f&quot;cipher_right = &#123;c_right&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c1 = (10968743933204598092696133780775439201414778610710138014434989682840359444219 : 50103014985350991132553587845849427708725164924911977563743169106436852927878 : 1)</span><br><span class="line">c2 = (16867464324078683910705186791465451317548022113044260821414766837123655851895 : 35017929439600128416871870160299373917483006878637442291141472473285240957511 : 1)</span><br><span class="line">c_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br><span class="line">c_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(60, 60, 60);">涉及加密解密的所有参数都已经给出，flag 只和 m 有关，而 m 的解密只涉及 ECC 的基本解密流程</font></p><p><font style="color:rgb(60, 60, 60);">m&#x3D;c1−r⋅K&#x3D;c1−r⋅k⋅G&#x3D;c1−k⋅c2</font></p><p><font style="color:rgb(60, 60, 60);">这样就得到了 m，m 是一个点，x 坐标和 y 坐标分别是 </font><code>m[0]</code><font style="color:rgb(60, 60, 60);"> 和 </font><code>m[1]</code><font style="color:rgb(60, 60, 60);">，flag 前半和后半分别整除 x 和 y，然后拼接就能得到 flag</font></p><h3 id="解题脚本如下-11"><a href="#解题脚本如下-11" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># sage</span><br><span class="line">p = 64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br><span class="line">a = 111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br><span class="line">b = 89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br><span class="line">k = 86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line"></span><br><span class="line">c1 = E([10968743933204598092696133780775439201414778610710138014434989682840359444219, 50103014985350991132553587845849427708725164924911977563743169106436852927878 ])</span><br><span class="line">c2 = E([16867464324078683910705186791465451317548022113044260821414766837123655851895, 35017929439600128416871870160299373917483006878637442291141472473285240957511 ])</span><br><span class="line">cipher_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br><span class="line">cipher_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><span class="line">m = c1 - k*c2</span><br><span class="line"></span><br><span class="line">x=m[0]</span><br><span class="line">y=m[1]</span><br><span class="line"></span><br><span class="line">left = cipher_left // x</span><br><span class="line">right = cipher_right // y</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">(left,right) =(531812496965563174412251588431148136, 526357398425538015765092604513836925)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(left))+long_to_bytes(int(right)))</span><br></pre></td></tr></table></figure><h2 id="5、学以致用"><a href="#5、学以致用" class="headerlink" title="5、学以致用"></a>5、学以致用</h2><h3 id="题目如下-19"><a href="#题目如下-19" class="headerlink" title="题目如下"></a>题目如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def pad(msg, nbits):</span><br><span class="line">    # pad了一下，仔细看看，别好不容易解出来了却没看到flag👼</span><br><span class="line">    pad_length = nbits - len(msg) * 8 - 16</span><br><span class="line">    assert pad_length &gt;= 0</span><br><span class="line">    pad = random.getrandbits(pad_length).to_bytes((pad_length + 7) // 8, &quot;big&quot;)</span><br><span class="line">    return pad[:len(pad)//2] + b&quot;*&quot; + msg + b&quot;*&quot; + pad[len(pad)//2:]</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    p = getPrime(1024)</span><br><span class="line">    q = getPrime(1024)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = 3</span><br><span class="line">    Nbits = 2048</span><br><span class="line">    flag = b&#x27;flag&#123;?????&#125;&#x27;</span><br><span class="line">    gift = b&#x27;GoOd_byE_nEw_5t@r&#x27;</span><br><span class="line">    </span><br><span class="line">    flag1 = bytes_to_long(pad(flag[:len(flag)//2], Nbits-1))</span><br><span class="line">    flag2 = bytes_to_long(pad(flag[len(flag)//2:], Nbits-1))</span><br><span class="line"></span><br><span class="line">    print(&#x27;n =&#x27;,n)</span><br><span class="line">    print(&#x27;c1 =&#x27;, pow(flag1, e, n))</span><br><span class="line">    print(&#x27;c2 =&#x27;, pow(flag2, e, n))</span><br><span class="line">    print(&#x27;c3 =&#x27;, pow(flag1 + flag2 + bytes_to_long(gift), e, n))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447</span><br><span class="line">c1 = 8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573</span><br><span class="line">c2 = 14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878</span><br><span class="line">c3 = 8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="解题脚本如下-12"><a href="#解题脚本如下-12" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from sage.all import *</span><br><span class="line">from Crypto.Util.number import long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line">n = 17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447</span><br><span class="line">c1 = 8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573</span><br><span class="line">c2 = 14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878</span><br><span class="line">c3 = 8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600</span><br><span class="line">gift = b&#x27;GoOd_byE_nEw_5t@r&#x27;</span><br><span class="line"></span><br><span class="line">x, y = PolynomialRing(Zmod(n), &#x27;x, y&#x27;).gens()</span><br><span class="line">f1 = x**3 - c1</span><br><span class="line">f2 = y**3 - c2</span><br><span class="line">f3 = (x + y + bytes_to_long(gift))**3 - c3</span><br><span class="line"></span><br><span class="line">gb = Ideal(f1, f2, f3).groebner_basis()</span><br><span class="line">f1, f2 = gb</span><br><span class="line">flag1 = int(-f1.coefficients()[1])</span><br><span class="line">flag2 = int(-f2.coefficients()[1])</span><br><span class="line"># 出题的时候加了给pad，大家得注意一下，flag在一堆trash中间，别做出了却没看见flag</span><br><span class="line">print((long_to_bytes(flag1)).split(b&#x27;*&#x27;)[2]+(long_to_bytes(flag2).split(b&#x27;*&#x27;)[1]))</span><br><span class="line"># b&#x27;flag&#123;W1Sh_you_Bec0me_an_excelL3nt_crypt0G2@pher&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECC学习记录</title>
      <link href="/2024/11/21/ECC%20learning%20record/"/>
      <url>/2024/11/21/ECC%20learning%20record/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>参考链接：</p><p><a href="https://www.bilibili.com/video/BV1v44y1b7Fd/?spm_id_from=333.337.search-card.all.click&vd_source=24312761fbf161db538ab5ea0eb572c6">【ECC加密算法】| ECC加密原理详解| 椭圆曲线加密| 密码学| 信息安全_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/ckm1607011/article/details/106826116">sage之椭圆曲线-CSDN博客</a></p><p><a href="https://cryptohack.org/challenges/ecc/">CryptoHack – Elliptic Curves challenges</a></p><hr><h2 id="椭圆曲线方程"><a href="#椭圆曲线方程" class="headerlink" title="椭圆曲线方程"></a>椭圆曲线方程</h2><p>椭圆曲线是： y² &#x3D; x³ + ax +b，其中还要满足（4a3 + 27b≠0）</p><hr><h2 id="椭圆曲线的点加法"><a href="#椭圆曲线的点加法" class="headerlink" title="椭圆曲线的点加法"></a>椭圆曲线的点加法</h2><p><img src="https://pic.imgdb.cn/item/673eee7dd29ded1a8cd4f947.webp"></p><p><img src="https://pic.imgdb.cn/item/673eee96d29ded1a8cd51929.webp"></p><p><img src="https://pic.imgdb.cn/item/673eeeaed29ded1a8cd534e5.webp"></p><p><img src="https://pic.imgdb.cn/item/673eeec9d29ded1a8cd5575f.webp"></p><hr><h2 id="ECC加密过程"><a href="#ECC加密过程" class="headerlink" title="ECC加密过程"></a>ECC加密过程</h2><p><img src="https://pic.imgdb.cn/item/673eeee8d29ded1a8cd58094.webp"></p><hr><h2 id="ECC密钥交换过程"><a href="#ECC密钥交换过程" class="headerlink" title="ECC密钥交换过程"></a>ECC密钥交换过程</h2><p><img src="https://pic.imgdb.cn/item/673eef00d29ded1a8cd5a02e.webp"></p><hr><h2 id="有限域上的椭圆曲线计算"><a href="#有限域上的椭圆曲线计算" class="headerlink" title="有限域上的椭圆曲线计算"></a>有限域上的椭圆曲线计算</h2><p><img src="https://pic.imgdb.cn/item/673eef16d29ded1a8cd5bef0.webp"></p><p><em><font style="color:rgb(6, 6, 7);">P</font></em><font style="color:rgb(6, 6, 7);">&#x3D;(x1,y1) 和 Q&#x3D;(x2,y2)是椭圆曲线上的两个点，k是根据 P</font><em><font style="color:rgb(6, 6, 7);"> </font></em><font style="color:rgb(6, 6, 7);">和 Q 是否相等来计算的斜率，P+Q&#x3D;(x3,y3)是点加法的结果。</font></p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p><img src="https://pic.imgdb.cn/item/673eef39d29ded1a8cd5e9b3.webp"></p><p>计算2A</p><p>由图可知，a&#x3D;b&#x3D;1，x1&#x3D;x2&#x3D;0，y1&#x3D;y2&#x3D;1</p><p>k&#x3D;(3<em>0² +1)&#x2F;2</em>y1 (mod 23)&#x3D;1&#x2F;2 mod 23</p><p>令 n≡1&#x2F;2 mod 23</p><pre><code>2n≡1 mod 231≡2*n mod 23</code></pre><p>解得 n&#x3D;12&#x3D;k</p><p>所以 x3&#x3D;12²-0-0 (mod 23)&#x3D; 6</p><pre><code>    y3=12*(0-6)-1 (mod 23)=-73 mod 23=-73 - 23 * [-73/23]（向下取整）=-73 - 23 * -4=19    负数求模：a&lt;0，a mod b = a - b * [a/b]（向下取整）</code></pre><p> 所以 2A（6 ,19）</p><hr><h2 id="sage上实现椭圆曲线的运算"><a href="#sage上实现椭圆曲线的运算" class="headerlink" title="sage上实现椭圆曲线的运算"></a>sage上实现椭圆曲线的运算</h2><h3 id="构造椭圆曲线E"><a href="#构造椭圆曲线E" class="headerlink" title="构造椭圆曲线E"></a>构造椭圆曲线E</h3><p>先定义 p , a , b</p><p>令 <font style="color:rgb(77, 77, 77);">E &#x3D; EllipticCurve(GF(p),[a,b])</font></p><h3 id="定义曲线上的点"><a href="#定义曲线上的点" class="headerlink" title="定义曲线上的点"></a><font style="color:rgb(77, 77, 77);">定义曲线上的点</font></h3><p>如 P &#x3D; E([10,20]) ， Q &#x3D; E（[40,50])</p><h3 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h3><p>P + Q</p><h3 id="数乘运算"><a href="#数乘运算" class="headerlink" title="数乘运算"></a>数乘运算</h3><p>10 * P</p><h3 id="举例说明-1"><a href="#举例说明-1" class="headerlink" title="举例说明"></a>举例说明</h3><h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h4><p><img src="https://pic.imgdb.cn/item/673eef54d29ded1a8cd60a3e.webp"></p><p>解题脚本如下</p><p><img src="https://pic.imgdb.cn/item/673eef72d29ded1a8cd6321e.webp"></p><h4 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h4><p><img src="https://pic.imgdb.cn/item/673eef88d29ded1a8cd64db5.webp"></p><p>解题脚本如下</p><p><img src="https://pic.imgdb.cn/item/673eefa0d29ded1a8cd66e7c.webp"></p><hr><h2 id="来两道题练手"><a href="#来两道题练手" class="headerlink" title="来两道题练手"></a>来两道题练手</h2><h3 id="NewStart-CTF-2024的一道简单-ECC-题目"><a href="#NewStart-CTF-2024的一道简单-ECC-题目" class="headerlink" title="NewStart CTF 2024的一道简单 ECC 题目"></a>NewStart CTF 2024的一道简单 ECC 题目</h3><h4 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import * # type: ignore</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">p = 64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br><span class="line">a = 111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br><span class="line">b = 89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">m = E.random_point()</span><br><span class="line">G = E.random_point()</span><br><span class="line">k = 86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><span class="line">K = k * G</span><br><span class="line">r = getPrime(256)</span><br><span class="line">c1 = m + r * K</span><br><span class="line">c2 = r * G</span><br><span class="line">c_left =bytes_to_long(flag[:len(flag)//2]) * m[0]</span><br><span class="line">c_right = bytes_to_long(flag[len(flag)//2:]) * m[1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(f&quot;c1 = &#123;c1&#125;&quot;)</span><br><span class="line">print(f&quot;c2 = &#123;c2&#125;&quot;)</span><br><span class="line">print(f&quot;cipher_left = &#123;c_left&#125;&quot;)</span><br><span class="line">print(f&quot;cipher_right = &#123;c_right&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c1 = (10968743933204598092696133780775439201414778610710138014434989682840359444219 : 50103014985350991132553587845849427708725164924911977563743169106436852927878 : 1)</span><br><span class="line">c2 = (16867464324078683910705186791465451317548022113044260821414766837123655851895 : 35017929439600128416871870160299373917483006878637442291141472473285240957511 : 1)</span><br><span class="line">c_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br><span class="line">c_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>1、E &#x3D; EllipticCurve(GF(p),[a,b])<font style="color:rgb(6, 6, 7);">使用 a 和 b 以及有限域 GF(p) 创建了一个椭圆曲线 E。</font></p><p><font style="color:rgb(6, 6, 7);">2、m &#x3D; E.random_point()</font></p><p><font style="color:rgb(6, 6, 7);">      G &#x3D; E.random_point()</font></p><p><font style="color:rgb(6, 6, 7);">      随机选择了椭圆曲线上的两个点 m 和 G。</font></p><p><font style="color:rgb(6, 6, 7);">3、 k &#x3D; 86388708736702446338970388622357740462258632504448854088010402300997950626097</font></p><p><font style="color:rgb(6, 6, 7);">      定义了一个私钥k</font></p><p><font style="color:rgb(6, 6, 7);"></font></p><p><font style="color:rgb(6, 6, 7);">因为</font></p><p><font style="color:rgb(6, 6, 7);">K &#x3D; k * G</font></p><p><font style="color:rgb(6, 6, 7);">所以</font></p><p><font style="color:rgb(6, 6, 7);">c1 &#x3D; m + r * K &#x3D; m + r * k * G</font></p><p><font style="color:rgb(6, 6, 7);">m &#x3D; c1 - k * c2</font></p><p><font style="color:rgb(60, 60, 60);">这样就得到了 m，m 是一个点，x 坐标和 y 坐标分别是 m[0] 和 m[1]，flag 前半和后半分别整除 x 和 y，然后拼接就能得到 flag</font></p><h4 id="解题脚本如下"><a href="#解题脚本如下" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># sage</span><br><span class="line">p = 64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br><span class="line">a = 111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br><span class="line">b = 89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br><span class="line">k = 86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line"></span><br><span class="line">c1 = E([10968743933204598092696133780775439201414778610710138014434989682840359444219, 50103014985350991132553587845849427708725164924911977563743169106436852927878 ])</span><br><span class="line">c2 = E([16867464324078683910705186791465451317548022113044260821414766837123655851895, 35017929439600128416871870160299373917483006878637442291141472473285240957511 ])</span><br><span class="line">cipher_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br><span class="line">cipher_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><span class="line">m = c1 - k*c2</span><br><span class="line"></span><br><span class="line">x=m[0]</span><br><span class="line">y=m[1]</span><br><span class="line"></span><br><span class="line">left = cipher_left // x</span><br><span class="line">right = cipher_right // y</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">(left,right) =(531812496965563174412251588431148136, 526357398425538015765092604513836925)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(left))+long_to_bytes(int(right)))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/673eefb5d29ded1a8cd68c36.webp"></p><h3 id="CryptoHack上的一道题目"><a href="#CryptoHack上的一道题目" class="headerlink" title="CryptoHack上的一道题目"></a>CryptoHack上的一道题目</h3><p>题目位置：<a href="https://cryptohack.org/challenges/ecc/">https://cryptohack.org/challenges/ecc/</a> 的Efficient Exchange</p><h4 id="题目如下-1"><a href="#题目如下-1" class="headerlink" title="题目如下"></a>题目如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def is_pkcs7_padded(message):</span><br><span class="line">    padding = message[-message[-1]:]</span><br><span class="line">    return all(padding[i] == len(padding) for i in range(0, len(padding)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):</span><br><span class="line">    # Derive AES key from shared secret</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(str(shared_secret).encode(&#x27;ascii&#x27;))</span><br><span class="line">    key = sha1.digest()[:16]</span><br><span class="line">    # Decrypt flag</span><br><span class="line">    ciphertext = bytes.fromhex(ciphertext)</span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    if is_pkcs7_padded(plaintext):</span><br><span class="line">        return unpad(plaintext, 16).decode(&#x27;ascii&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return plaintext.decode(&#x27;ascii&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shared_secret = ?</span><br><span class="line">iv = ?</span><br><span class="line">ciphertext = ?</span><br><span class="line"></span><br><span class="line">print(decrypt_flag(shared_secret, iv, ciphertext))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a = 497</span><br><span class="line">b = 1768</span><br><span class="line">p = 9739</span><br><span class="line">Q_x = 4726</span><br><span class="line">nB = 6534</span><br><span class="line">iv = &#x27;cd9da9f1c60925922377ea952afc212c&#x27;</span><br><span class="line">encrypted_flag = &#x27;febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8&#x27;</span><br><span class="line">p ≡ 3 mod 4 (which will help you find y from y^2)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>根据 y² &#x3D; x³ + ax +b (mod p)，这道题给出了x的值，那么y的值就有两种可能 y1 和 y2 , Q点也有两种可能</p><p>求y的值，是一个<strong>二次剩余</strong>问题（简单了解可以看<a href="https://www.bilibili.com/video/BV1xt4y1n7T5/?spm_id_from=333.337.search-card.all.click&vd_source=802632f153a1ecb77319c61fa70dccdf">【一口气学完】密码学的数学基础 3，《二次剩余》_哔哩哔哩_bilibili</a>）</p><p>求出 y1 和 y2 后，得到 Q1 和 Q2，然后就可以得到共享密钥 secrect1 和 secrect2</p><p>最后把 secrect[0] , iv , encrypted_flag 代进函数 decrypt_flag()中即可求出 flag</p><p>让我来解释一下函数 <strong>sqrt，</strong>和y1, y2 &#x3D; sqrt((pow(Q_x, 3) + a * Q_x + b) % p, p)</p><p>1、因给定一个整数 a 和一个正整数 m，如果存在一个整数 x 使 x² ≡ a ( mod m ) 成立，就可以说 a 是模 m 的二次剩余（x 叫 a 在模 m 下的平方根）。</p><p>a，m 已知，求 x 的值</p><p>x² ≡ a ( mod m )</p><p>a ≡ x² ( mod m )</p><p>由我的总结（记就完了）：x的范围是[0,m-1]，a的范围是[0,m-1]，如果 a &#x3D; 0，那么 x 才能取0，否则范围都是[1,m-1]</p><p>所以，设 i 遍历<font style="color:rgb(77, 77, 77);">1，2，3，……，m-1，逐一平方取模计算找模m的二次剩余，若等于 a，则 </font><strong><font style="color:rgb(77, 77, 77);">x1 &#x3D; i，x2 &#x3D; m - i</font></strong></p><p><font style="color:rgb(77, 77, 77);">对 x2 &#x3D; m - i 有疑问就再好好学一下二次剩余，或者看下面这张图找规律</font></p><p><img src="https://pic.imgdb.cn/item/673ef0ded29ded1a8cd80b77.webp"></p><p><font style="color:rgb(77, 77, 77);"></font></p><p><font style="color:rgb(77, 77, 77);">2、按理来说应该是</font>y1, y2 &#x3D; sqrt(pow(Q_x, 3) + a * Q_x + b, p)，但是因为 p 是有限域的大小，<font style="color:rgb(6, 6, 7);">当我们计算 y 的值时，我们需要确保所有的运算都在模 p</font><font style="color:rgb(6, 6, 7);"> 下进行，以保证结果是有限域中的一个有效元素。</font></p><p><font style="color:rgb(28, 31, 35);">( 1 )在有限域中，所有的算术运算（加法、减法、乘法和除法）都是在模 p 下执行的。这意味着当我们处理椭圆曲线上的点时，我们关心的是这些点在模 p 下的坐标。</font></p><p><font style="color:rgb(28, 31, 35);">( 2 )( pow(Q_x, 3) + a * Q_x + b ) 的结果大于 p ，这个结果在有限域 p 中是不合法的，因为有限域 p 仅包含从 0  到 p-1 的整数，所以要取模。</font></p><h4 id="解题脚本如下-1"><a href="#解题脚本如下-1" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">def sqrt(x, q):</span><br><span class="line">    for i in range(1, q):</span><br><span class="line">        if pow(i, 2) % q == x:</span><br><span class="line">            return (i, q - i)</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">def is_pkcs7_padded(message):</span><br><span class="line">    padding = message[-message[-1]:]</span><br><span class="line">    return all(padding[i] == len(padding) for i in range(0, len(padding)))</span><br><span class="line"></span><br><span class="line">def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):</span><br><span class="line">    # Derive AES key from shared secret</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(str(shared_secret).encode(&#x27;ascii&#x27;))</span><br><span class="line">    key = sha1.digest()[:16]</span><br><span class="line">    # Decrypt flag</span><br><span class="line">    ciphertext = bytes.fromhex(ciphertext)</span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    if is_pkcs7_padded(plaintext):</span><br><span class="line">        return unpad(plaintext, 16).decode(&#x27;ascii&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return plaintext.decode(&#x27;ascii&#x27;)</span><br><span class="line"></span><br><span class="line">a = 497</span><br><span class="line">b = 1768</span><br><span class="line">p = 9739</span><br><span class="line">Q_x = 4726</span><br><span class="line">nB = 6534</span><br><span class="line">iv = &#x27;cd9da9f1c60925922377ea952afc212c&#x27;</span><br><span class="line">encrypted_flag = &#x27;febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8&#x27;</span><br><span class="line"></span><br><span class="line">y1, y2 = sqrt((pow(Q_x, 3) + a * Q_x + b) % p, p)</span><br><span class="line">print(y1,y2)</span><br><span class="line"></span><br><span class="line">Q1 = (Q_x, int(y1))</span><br><span class="line">Q2 = (Q_x, int(y2))</span><br><span class="line">print(Q1,Q2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># sage</span><br><span class="line">a = 497</span><br><span class="line">b = 1768</span><br><span class="line">p = 9739</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">Q1 = E([4726, 3452])</span><br><span class="line">Q2 = E([4726, 6287])</span><br><span class="line">secret1 = nB * Q1   # secret1 = (1791 : 7558 : 1) </span><br><span class="line">secret2 = nB * Q2   # secret2 = (1791 : 2181 : 1)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">secret1 = (1791,7558)</span><br><span class="line">secret2 = (1791,2181)</span><br><span class="line"></span><br><span class="line">if Q1[1] % 4 ==3:</span><br><span class="line">    flag = decrypt_flag(secret1[0], iv, encrypted_flag)</span><br><span class="line">    print(flag)</span><br><span class="line">else:</span><br><span class="line">    flag = decrypt_flag(secret2[0], iv, encrypted_flag)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码 </category>
          
          <category> ECC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建记录</title>
      <link href="/2024/11/01/blog%20building/"/>
      <url>/2024/11/01/blog%20building/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>我的博客：<a href="https://monologuue.github.io/">https://monologuue.github.io/</a></p><p>搭建hexo看的视频：<a href="https://www.bilibili.com/video/BV1Ju4m1c7WR/?spm_id_from=333.337.search-card.all.click&vd_source=802632f153a1ecb77319c61fa70dccdf">https://www.bilibili.com/video/BV1Ju4m1c7WR/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;802632f153a1ecb77319c61fa70dccdf</a></p><p>美化主题看的视频：<a href="https://www.bilibili.com/video/BV1JP411P7gc/?spm_id_from=333.337.search-card.all.click&vd_source=802632f153a1ecb77319c61fa70dccdf">https://www.bilibili.com/video/BV1JP411P7gc/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;802632f153a1ecb77319c61fa70dccdf</a></p><hr><h1 id="一、搭建hexo"><a href="#一、搭建hexo" class="headerlink" title="一、搭建hexo"></a>一、搭建hexo</h1><h2 id="下载好-nodejs-和-git"><a href="#下载好-nodejs-和-git" class="headerlink" title="**下载好 nodejs 和 git **"></a>**下载好 nodejs 和 git **</h2><h2 id="在github上搭建仓库"><a href="#在github上搭建仓库" class="headerlink" title="在github上搭建仓库"></a><strong>在github上搭建仓库</strong></h2><p><img src="https://pic.imgdb.cn/item/672482f9d29ded1a8c2b574e.png"></p><h2 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a><strong>生成SSH Keys</strong></h2><p>在Git bash here上输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>回车，然后找到id_rsa.pub文件，复制其中内容到github账号的SSH keys上</p><p><img src="https://pic.imgdb.cn/item/6724ad23d29ded1a8c63b52e.png"></p><p>在Git bash here上输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>回车，然后输入yes，回车。</p><h2 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a><strong>下载hexo</strong></h2><p>在Git bash here上依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">hexo install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后ctrl+c关闭本地服务器</p><h2 id="上线博客"><a href="#上线博客" class="headerlink" title="上线博客"></a><strong>上线博客</strong></h2><p>打开_config.yml文件，拖到最底下，把deploy下面的内容改成这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Monologuue/Monologuue.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>repository后面的内容为github上的仓库页面的code</p><p><img src="https://pic.imgdb.cn/item/6724afe6d29ded1a8c667abb.png"></p><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a><strong>部署博客</strong></h2><p>在博客文件夹中打开Git bash here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就搭建好了毛坯房，博客页面是默认的hexo</p><hr><h1 id="二、美化主题"><a href="#二、美化主题" class="headerlink" title="二、美化主题"></a>二、美化主题</h1><h2 id="安装butterfly主题和需要用到的渲染器"><a href="#安装butterfly主题和需要用到的渲染器" class="headerlink" title="安装butterfly主题和需要用到的渲染器"></a><strong>安装butterfly主题和需要用到的渲染器</strong></h2><p>在博客文件下打开Git bash here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>修改_config.yml<font style="color:rgba(0, 0, 0, 0.75);">文件，拖到最下面，找到theme，把后面内容改成butterfly，记得保存</font></p><p><img src="https://pic.imgdb.cn/item/6724b057d29ded1a8c6739a8.png"></p><p><font style="color:rgb(77, 77, 77);">然后把themes文件夹中的 _config.yml 重命名为 _config.butterfly.yml，复制到博客的根目录下与_config.yml同级，像这样</font><img src="https://pic.imgdb.cn/item/6724b099d29ded1a8c6777c3.png"></p><p><font style="color:rgba(0, 0, 0, 0.75);"></font></p><h2 id="然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题"><a href="#然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题" class="headerlink" title="然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题"></a><strong><font style="color:rgba(0, 0, 0, 0.75);">然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题</font></strong></h2><p><font style="color:rgb(77, 77, 77);">主题配置文件（最好用vscode打开） _config.butterfly.yml</font></p><p><font style="color:rgba(0, 0, 0, 0.75);">这其中有许多供人选择的模块，有想要的就在enable: 后加上true,相反就加false，例如</font></p><p><img src="https://pic.imgdb.cn/item/6724b0b9d29ded1a8c678f6e.png"></p><p>我选择鼠标点击效果是出现爱心</p><p><img src="https://pic.imgdb.cn/item/6724b0cfd29ded1a8c679e9c.png"></p><p>想要添加图片就在对应位置添加图片的路径</p><p><img src="https://pic.imgdb.cn/item/6724b0e6d29ded1a8c67b013.png"></p><p>像这些如果有需要的功能可以把注释的 # 去掉</p><p><strong>应用主题</strong></p><p>在博客文件下打开Git bash here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果博客页面没有变换，就多等几分钟，延迟挺大的</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
