<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ECC学习记录</title>
      <link href="/2024/11/21/ECC%20learning%20record/"/>
      <url>/2024/11/21/ECC%20learning%20record/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>参考链接：</p><p><a href="https://www.bilibili.com/video/BV1v44y1b7Fd/?spm_id_from=333.337.search-card.all.click&vd_source=24312761fbf161db538ab5ea0eb572c6">【ECC加密算法】| ECC加密原理详解| 椭圆曲线加密| 密码学| 信息安全_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/ckm1607011/article/details/106826116">sage之椭圆曲线-CSDN博客</a></p><p><a href="https://cryptohack.org/challenges/ecc/">CryptoHack – Elliptic Curves challenges</a></p><hr><h2 id="椭圆曲线方程"><a href="#椭圆曲线方程" class="headerlink" title="椭圆曲线方程"></a>椭圆曲线方程</h2><p>椭圆曲线是： y² &#x3D; x³ + ax +b，其中还要满足（4a3 + 27b≠0）</p><hr><h2 id="椭圆曲线的点加法"><a href="#椭圆曲线的点加法" class="headerlink" title="椭圆曲线的点加法"></a>椭圆曲线的点加法</h2><p><img src="https://pic.imgdb.cn/item/673eee7dd29ded1a8cd4f947.webp"></p><p><img src="https://pic.imgdb.cn/item/673eee96d29ded1a8cd51929.webp"></p><p><img src="https://pic.imgdb.cn/item/673eeeaed29ded1a8cd534e5.webp"></p><p><img src="https://pic.imgdb.cn/item/673eeec9d29ded1a8cd5575f.webp"></p><hr><h2 id="ECC加密过程"><a href="#ECC加密过程" class="headerlink" title="ECC加密过程"></a>ECC加密过程</h2><p><img src="https://pic.imgdb.cn/item/673eeee8d29ded1a8cd58094.webp"></p><hr><h2 id="ECC密钥交换过程"><a href="#ECC密钥交换过程" class="headerlink" title="ECC密钥交换过程"></a>ECC密钥交换过程</h2><p><img src="https://pic.imgdb.cn/item/673eef00d29ded1a8cd5a02e.webp"></p><hr><h2 id="有限域上的椭圆曲线计算"><a href="#有限域上的椭圆曲线计算" class="headerlink" title="有限域上的椭圆曲线计算"></a>有限域上的椭圆曲线计算</h2><p><img src="https://pic.imgdb.cn/item/673eef16d29ded1a8cd5bef0.webp"></p><p><em><font style="color:rgb(6, 6, 7);">P</font></em><font style="color:rgb(6, 6, 7);">&#x3D;(x1,y1) 和 Q&#x3D;(x2,y2)是椭圆曲线上的两个点，k是根据 P</font><em><font style="color:rgb(6, 6, 7);"> </font></em><font style="color:rgb(6, 6, 7);">和 Q 是否相等来计算的斜率，P+Q&#x3D;(x3,y3)是点加法的结果。</font></p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p><img src="https://pic.imgdb.cn/item/673eef39d29ded1a8cd5e9b3.webp"></p><p>计算2A</p><p>由图可知，a&#x3D;b&#x3D;1，x1&#x3D;x2&#x3D;0，y1&#x3D;y2&#x3D;1</p><p>k&#x3D;(3<em>0² +1)&#x2F;2</em>y1 (mod 23)&#x3D;1&#x2F;2 mod 23</p><p>令 n≡1&#x2F;2 mod 23</p><pre><code>2n≡1 mod 231≡2*n mod 23</code></pre><p>解得 n&#x3D;12&#x3D;k</p><p>所以 x3&#x3D;12²-0-0 (mod 23)&#x3D; 6</p><pre><code>    y3=12*(0-6)-1 (mod 23)=-73 mod 23=-73 - 23 * [-73/23]（向下取整）=-73 - 23 * -4=19    负数求模：a&lt;0，a mod b = a - b * [a/b]（向下取整）</code></pre><p> 所以 2A（6 ,19）</p><hr><h2 id="sage上实现椭圆曲线的运算"><a href="#sage上实现椭圆曲线的运算" class="headerlink" title="sage上实现椭圆曲线的运算"></a>sage上实现椭圆曲线的运算</h2><h3 id="构造椭圆曲线E"><a href="#构造椭圆曲线E" class="headerlink" title="构造椭圆曲线E"></a>构造椭圆曲线E</h3><p>先定义 p , a , b</p><p>令 <font style="color:rgb(77, 77, 77);">E &#x3D; EllipticCurve(GF(p),[a,b])</font></p><h3 id="定义曲线上的点"><a href="#定义曲线上的点" class="headerlink" title="定义曲线上的点"></a><font style="color:rgb(77, 77, 77);">定义曲线上的点</font></h3><p>如 P &#x3D; E([10,20]) ， Q &#x3D; E（[40,50])</p><h3 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h3><p>P + Q</p><h3 id="数乘运算"><a href="#数乘运算" class="headerlink" title="数乘运算"></a>数乘运算</h3><p>10 * P</p><h3 id="举例说明-1"><a href="#举例说明-1" class="headerlink" title="举例说明"></a>举例说明</h3><h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h4><p><img src="https://pic.imgdb.cn/item/673eef54d29ded1a8cd60a3e.webp"></p><p>解题脚本如下</p><p><img src="https://pic.imgdb.cn/item/673eef72d29ded1a8cd6321e.webp"></p><h4 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h4><p><img src="https://pic.imgdb.cn/item/673eef88d29ded1a8cd64db5.webp"></p><p>解题脚本如下</p><p><img src="https://pic.imgdb.cn/item/673eefa0d29ded1a8cd66e7c.webp"></p><hr><h2 id="来两道题练手"><a href="#来两道题练手" class="headerlink" title="来两道题练手"></a>来两道题练手</h2><h3 id="NewStart-CTF-2024的一道简单-ECC-题目"><a href="#NewStart-CTF-2024的一道简单-ECC-题目" class="headerlink" title="NewStart CTF 2024的一道简单 ECC 题目"></a>NewStart CTF 2024的一道简单 ECC 题目</h3><h4 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import * # type: ignore</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">p = 64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br><span class="line">a = 111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br><span class="line">b = 89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line">m = E.random_point()</span><br><span class="line">G = E.random_point()</span><br><span class="line">k = 86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><span class="line">K = k * G</span><br><span class="line">r = getPrime(256)</span><br><span class="line">c1 = m + r * K</span><br><span class="line">c2 = r * G</span><br><span class="line">c_left =bytes_to_long(flag[:len(flag)//2]) * m[0]</span><br><span class="line">c_right = bytes_to_long(flag[len(flag)//2:]) * m[1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(f&quot;c1 = &#123;c1&#125;&quot;)</span><br><span class="line">print(f&quot;c2 = &#123;c2&#125;&quot;)</span><br><span class="line">print(f&quot;cipher_left = &#123;c_left&#125;&quot;)</span><br><span class="line">print(f&quot;cipher_right = &#123;c_right&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">c1 = (10968743933204598092696133780775439201414778610710138014434989682840359444219 : 50103014985350991132553587845849427708725164924911977563743169106436852927878 : 1)</span><br><span class="line">c2 = (16867464324078683910705186791465451317548022113044260821414766837123655851895 : 35017929439600128416871870160299373917483006878637442291141472473285240957511 : 1)</span><br><span class="line">c_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br><span class="line">c_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>1、E &#x3D; EllipticCurve(GF(p),[a,b])<font style="color:rgb(6, 6, 7);">使用 a 和 b 以及有限域 GF(p) 创建了一个椭圆曲线 E。</font></p><p><font style="color:rgb(6, 6, 7);">2、m &#x3D; E.random_point()</font></p><p><font style="color:rgb(6, 6, 7);">      G &#x3D; E.random_point()</font></p><p><font style="color:rgb(6, 6, 7);">      随机选择了椭圆曲线上的两个点 m 和 G。</font></p><p><font style="color:rgb(6, 6, 7);">3、 k &#x3D; 86388708736702446338970388622357740462258632504448854088010402300997950626097</font></p><p><font style="color:rgb(6, 6, 7);">      定义了一个私钥k</font></p><p><font style="color:rgb(6, 6, 7);"></font></p><p><font style="color:rgb(6, 6, 7);">因为</font></p><p><font style="color:rgb(6, 6, 7);">K &#x3D; k * G</font></p><p><font style="color:rgb(6, 6, 7);">所以</font></p><p><font style="color:rgb(6, 6, 7);">c1 &#x3D; m + r * K &#x3D; m + r * k * G</font></p><p><font style="color:rgb(6, 6, 7);">m &#x3D; c1 - k * c2</font></p><p><font style="color:rgb(60, 60, 60);">这样就得到了 m，m 是一个点，x 坐标和 y 坐标分别是 m[0] 和 m[1]，flag 前半和后半分别整除 x 和 y，然后拼接就能得到 flag</font></p><h4 id="解题脚本如下"><a href="#解题脚本如下" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># sage</span><br><span class="line">p = 64408890408990977312449920805352688472706861581336743385477748208693864804529</span><br><span class="line">a = 111430905433526442875199303277188510507615671079377406541731212384727808735043</span><br><span class="line">b = 89198454229925288228295769729512965517404638795380570071386449796440992672131</span><br><span class="line">k = 86388708736702446338970388622357740462258632504448854088010402300997950626097</span><br><span class="line">E = EllipticCurve(GF(p),[a,b])</span><br><span class="line"></span><br><span class="line">c1 = E([10968743933204598092696133780775439201414778610710138014434989682840359444219, 50103014985350991132553587845849427708725164924911977563743169106436852927878 ])</span><br><span class="line">c2 = E([16867464324078683910705186791465451317548022113044260821414766837123655851895, 35017929439600128416871870160299373917483006878637442291141472473285240957511 ])</span><br><span class="line">cipher_left = 15994601655318787407246474983001154806876869424718464381078733967623659362582</span><br><span class="line">cipher_right = 3289163848384516328785319206783144958342012136997423465408554351179699716569</span><br><span class="line">m = c1 - k*c2</span><br><span class="line"></span><br><span class="line">x=m[0]</span><br><span class="line">y=m[1]</span><br><span class="line"></span><br><span class="line">left = cipher_left // x</span><br><span class="line">right = cipher_right // y</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">(left,right) =(531812496965563174412251588431148136, 526357398425538015765092604513836925)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(left))+long_to_bytes(int(right)))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/673eefb5d29ded1a8cd68c36.webp"></p><h3 id="CryptoHack上的一道题目"><a href="#CryptoHack上的一道题目" class="headerlink" title="CryptoHack上的一道题目"></a>CryptoHack上的一道题目</h3><p>题目位置：<a href="https://cryptohack.org/challenges/ecc/">https://cryptohack.org/challenges/ecc/</a> 的Efficient Exchange</p><h4 id="题目如下-1"><a href="#题目如下-1" class="headerlink" title="题目如下"></a>题目如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def is_pkcs7_padded(message):</span><br><span class="line">    padding = message[-message[-1]:]</span><br><span class="line">    return all(padding[i] == len(padding) for i in range(0, len(padding)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):</span><br><span class="line">    # Derive AES key from shared secret</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(str(shared_secret).encode(&#x27;ascii&#x27;))</span><br><span class="line">    key = sha1.digest()[:16]</span><br><span class="line">    # Decrypt flag</span><br><span class="line">    ciphertext = bytes.fromhex(ciphertext)</span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    if is_pkcs7_padded(plaintext):</span><br><span class="line">        return unpad(plaintext, 16).decode(&#x27;ascii&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return plaintext.decode(&#x27;ascii&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shared_secret = ?</span><br><span class="line">iv = ?</span><br><span class="line">ciphertext = ?</span><br><span class="line"></span><br><span class="line">print(decrypt_flag(shared_secret, iv, ciphertext))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a = 497</span><br><span class="line">b = 1768</span><br><span class="line">p = 9739</span><br><span class="line">Q_x = 4726</span><br><span class="line">nB = 6534</span><br><span class="line">iv = &#x27;cd9da9f1c60925922377ea952afc212c&#x27;</span><br><span class="line">encrypted_flag = &#x27;febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8&#x27;</span><br><span class="line">p ≡ 3 mod 4 (which will help you find y from y^2)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>根据 y² &#x3D; x³ + ax +b (mod p)，这道题给出了x的值，那么y的值就有两种可能 y1 和 y2 , Q点也有两种可能</p><p>求y的值，是一个<strong>二次剩余</strong>问题（简单了解可以看<a href="https://www.bilibili.com/video/BV1xt4y1n7T5/?spm_id_from=333.337.search-card.all.click&vd_source=802632f153a1ecb77319c61fa70dccdf">【一口气学完】密码学的数学基础 3，《二次剩余》_哔哩哔哩_bilibili</a>）</p><p>求出 y1 和 y2 后，得到 Q1 和 Q2，然后就可以得到共享密钥 secrect1 和 secrect2</p><p>最后把 secrect[0] , iv , encrypted_flag 代进函数 decrypt_flag()中即可求出 flag</p><p>让我来解释一下函数 <strong>sqrt，</strong>和y1, y2 &#x3D; sqrt((pow(Q_x, 3) + a * Q_x + b) % p, p)</p><p>1、因给定一个整数 a 和一个正整数 m，如果存在一个整数 x 使 x² ≡ a ( mod m ) 成立，就可以说 a 是模 m 的二次剩余（x 叫 a 在模 m 下的平方根）。</p><p>a，m 已知，求 x 的值</p><p>x² ≡ a ( mod m )</p><p>a ≡ x² ( mod m )</p><p>由我的总结（记就完了）：x的范围是[0,m-1]，a的范围是[0,m-1]，如果 a &#x3D; 0，那么 x 才能取0，否则范围都是[1,m-1]</p><p>所以，设 i 遍历<font style="color:rgb(77, 77, 77);">1，2，3，……，m-1，逐一平方取模计算找模m的二次剩余，若等于 a，则 </font><strong><font style="color:rgb(77, 77, 77);">x1 &#x3D; i，x2 &#x3D; m - i</font></strong></p><p><font style="color:rgb(77, 77, 77);">对 x2 &#x3D; m - i 有疑问就再好好学一下二次剩余，或者看下面这张图找规律</font></p><p><img src="https://pic.imgdb.cn/item/673ef0ded29ded1a8cd80b77.webp"></p><p><font style="color:rgb(77, 77, 77);"></font></p><p><font style="color:rgb(77, 77, 77);">2、按理来说应该是</font>y1, y2 &#x3D; sqrt(pow(Q_x, 3) + a * Q_x + b, p)，但是因为 p 是有限域的大小，<font style="color:rgb(6, 6, 7);">当我们计算 y 的值时，我们需要确保所有的运算都在模 p</font><font style="color:rgb(6, 6, 7);"> 下进行，以保证结果是有限域中的一个有效元素。</font></p><p><font style="color:rgb(28, 31, 35);">( 1 )在有限域中，所有的算术运算（加法、减法、乘法和除法）都是在模 p 下执行的。这意味着当我们处理椭圆曲线上的点时，我们关心的是这些点在模 p 下的坐标。</font></p><p><font style="color:rgb(28, 31, 35);">( 2 )( pow(Q_x, 3) + a * Q_x + b ) 的结果大于 p ，这个结果在有限域 p 中是不合法的，因为有限域 p 仅包含从 0  到 p-1 的整数，所以要取模。</font></p><h4 id="解题脚本如下-1"><a href="#解题脚本如下-1" class="headerlink" title="解题脚本如下"></a>解题脚本如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">def sqrt(x, q):</span><br><span class="line">    for i in range(1, q):</span><br><span class="line">        if pow(i, 2) % q == x:</span><br><span class="line">            return (i, q - i)</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">def is_pkcs7_padded(message):</span><br><span class="line">    padding = message[-message[-1]:]</span><br><span class="line">    return all(padding[i] == len(padding) for i in range(0, len(padding)))</span><br><span class="line"></span><br><span class="line">def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):</span><br><span class="line">    # Derive AES key from shared secret</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(str(shared_secret).encode(&#x27;ascii&#x27;))</span><br><span class="line">    key = sha1.digest()[:16]</span><br><span class="line">    # Decrypt flag</span><br><span class="line">    ciphertext = bytes.fromhex(ciphertext)</span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">    if is_pkcs7_padded(plaintext):</span><br><span class="line">        return unpad(plaintext, 16).decode(&#x27;ascii&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return plaintext.decode(&#x27;ascii&#x27;)</span><br><span class="line"></span><br><span class="line">a = 497</span><br><span class="line">b = 1768</span><br><span class="line">p = 9739</span><br><span class="line">Q_x = 4726</span><br><span class="line">nB = 6534</span><br><span class="line">iv = &#x27;cd9da9f1c60925922377ea952afc212c&#x27;</span><br><span class="line">encrypted_flag = &#x27;febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8&#x27;</span><br><span class="line"></span><br><span class="line">y1, y2 = sqrt((pow(Q_x, 3) + a * Q_x + b) % p, p)</span><br><span class="line">print(y1,y2)</span><br><span class="line"></span><br><span class="line">Q1 = (Q_x, int(y1))</span><br><span class="line">Q2 = (Q_x, int(y2))</span><br><span class="line">print(Q1,Q2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># sage</span><br><span class="line">a = 497</span><br><span class="line">b = 1768</span><br><span class="line">p = 9739</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">Q1 = E([4726, 3452])</span><br><span class="line">Q2 = E([4726, 6287])</span><br><span class="line">secret1 = nB * Q1   # secret1 = (1791 : 7558 : 1) </span><br><span class="line">secret2 = nB * Q2   # secret2 = (1791 : 2181 : 1)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">secret1 = (1791,7558)</span><br><span class="line">secret2 = (1791,2181)</span><br><span class="line"></span><br><span class="line">if Q1[1] % 4 ==3:</span><br><span class="line">    flag = decrypt_flag(secret1[0], iv, encrypted_flag)</span><br><span class="line">    print(flag)</span><br><span class="line">else:</span><br><span class="line">    flag = decrypt_flag(secret2[0], iv, encrypted_flag)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码 </category>
          
          <category> ECC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建记录</title>
      <link href="/2024/11/01/blog%20building/"/>
      <url>/2024/11/01/blog%20building/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>我的博客：<a href="https://monologuue.github.io/">https://monologuue.github.io/</a></p><p>搭建hexo看的视频：<a href="https://www.bilibili.com/video/BV1Ju4m1c7WR/?spm_id_from=333.337.search-card.all.click&vd_source=802632f153a1ecb77319c61fa70dccdf">https://www.bilibili.com/video/BV1Ju4m1c7WR/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;802632f153a1ecb77319c61fa70dccdf</a></p><p>美化主题看的视频：<a href="https://www.bilibili.com/video/BV1JP411P7gc/?spm_id_from=333.337.search-card.all.click&vd_source=802632f153a1ecb77319c61fa70dccdf">https://www.bilibili.com/video/BV1JP411P7gc/?spm_id_from&#x3D;333.337.search-card.all.click&amp;vd_source&#x3D;802632f153a1ecb77319c61fa70dccdf</a></p><hr><h1 id="一、搭建hexo"><a href="#一、搭建hexo" class="headerlink" title="一、搭建hexo"></a>一、搭建hexo</h1><h2 id="下载好-nodejs-和-git"><a href="#下载好-nodejs-和-git" class="headerlink" title="**下载好 nodejs 和 git **"></a>**下载好 nodejs 和 git **</h2><h2 id="在github上搭建仓库"><a href="#在github上搭建仓库" class="headerlink" title="在github上搭建仓库"></a><strong>在github上搭建仓库</strong></h2><p><img src="https://pic.imgdb.cn/item/672482f9d29ded1a8c2b574e.png"></p><h2 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a><strong>生成SSH Keys</strong></h2><p>在Git bash here上输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>回车，然后找到id_rsa.pub文件，复制其中内容到github账号的SSH keys上</p><p><img src="https://pic.imgdb.cn/item/6724ad23d29ded1a8c63b52e.png"></p><p>在Git bash here上输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>回车，然后输入yes，回车。</p><h2 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a><strong>下载hexo</strong></h2><p>在Git bash here上依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">hexo install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后ctrl+c关闭本地服务器</p><h2 id="上线博客"><a href="#上线博客" class="headerlink" title="上线博客"></a><strong>上线博客</strong></h2><p>打开_config.yml文件，拖到最底下，把deploy下面的内容改成这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Monologuue/Monologuue.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>repository后面的内容为github上的仓库页面的code</p><p><img src="https://pic.imgdb.cn/item/6724afe6d29ded1a8c667abb.png"></p><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a><strong>部署博客</strong></h2><p>在博客文件夹中打开Git bash here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就搭建好了毛坯房，博客页面是默认的hexo</p><hr><h1 id="二、美化主题"><a href="#二、美化主题" class="headerlink" title="二、美化主题"></a>二、美化主题</h1><h2 id="安装butterfly主题和需要用到的渲染器"><a href="#安装butterfly主题和需要用到的渲染器" class="headerlink" title="安装butterfly主题和需要用到的渲染器"></a><strong>安装butterfly主题和需要用到的渲染器</strong></h2><p>在博客文件下打开Git bash here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>修改_config.yml<font style="color:rgba(0, 0, 0, 0.75);">文件，拖到最下面，找到theme，把后面内容改成butterfly，记得保存</font></p><p><img src="https://pic.imgdb.cn/item/6724b057d29ded1a8c6739a8.png"></p><p><font style="color:rgb(77, 77, 77);">然后把themes文件夹中的 _config.yml 重命名为 _config.butterfly.yml，复制到博客的根目录下与_config.yml同级，像这样</font><img src="https://pic.imgdb.cn/item/6724b099d29ded1a8c6777c3.png"></p><p><font style="color:rgba(0, 0, 0, 0.75);"></font></p><h2 id="然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题"><a href="#然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题" class="headerlink" title="然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题"></a><strong><font style="color:rgba(0, 0, 0, 0.75);">然后就是跟着视频教程，我也写不出来，东西太多了，修改主题不难，就是很麻烦，如果看得懂英文就没什么太大的问题</font></strong></h2><p><font style="color:rgb(77, 77, 77);">主题配置文件（最好用vscode打开） _config.butterfly.yml</font></p><p><font style="color:rgba(0, 0, 0, 0.75);">这其中有许多供人选择的模块，有想要的就在enable: 后加上true,相反就加false，例如</font></p><p><img src="https://pic.imgdb.cn/item/6724b0b9d29ded1a8c678f6e.png"></p><p>我选择鼠标点击效果是出现爱心</p><p><img src="https://pic.imgdb.cn/item/6724b0cfd29ded1a8c679e9c.png"></p><p>想要添加图片就在对应位置添加图片的路径</p><p><img src="https://pic.imgdb.cn/item/6724b0e6d29ded1a8c67b013.png"></p><p>像这些如果有需要的功能可以把注释的 # 去掉</p><p><strong>应用主题</strong></p><p>在博客文件下打开Git bash here，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果博客页面没有变换，就多等几分钟，延迟挺大的</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
